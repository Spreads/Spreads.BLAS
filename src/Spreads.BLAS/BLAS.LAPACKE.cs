// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

using Spreads.Native;
using Spreads.DataTypes;

// ReSharper disable IdentifierTypo
// ReSharper disable InconsistentNaming
// ReSharper disable ConvertIfStatementToReturnStatement

namespace Spreads
{
    public static unsafe partial class BLAS
    {
        public static class LAPACKE
        {
            public static int Sbbcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, float* theta, float* phi, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t, float* v2t, int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);

                return OpenBLAS.LAPACKE.Sbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);
            }

            public static int Dbbcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, double* theta, double* phi, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t, double* v2t, int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);

                return OpenBLAS.LAPACKE.Dbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);
            }

            public static int Cbbcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, float* theta, float* phi, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);

                return OpenBLAS.LAPACKE.Cbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);
            }

            public static int Zbbcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, double* theta, double* phi, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);

                return OpenBLAS.LAPACKE.Zbbcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e);
            }

            public static int SbbcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, float* theta, float* phi, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t, float* v2t, int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork);

                return OpenBLAS.LAPACKE.SbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork);
            }

            public static int DbbcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, double* theta, double* phi, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t, double* v2t, int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork);

                return OpenBLAS.LAPACKE.DbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, work, lwork);
            }

            public static int CbbcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, float* theta, float* phi, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, float* b11d, float* b11e, float* b12d, float* b12e, float* b21d, float* b21e, float* b22d, float* b22e, float* rwork, int lrwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork);

                return OpenBLAS.LAPACKE.CbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork);
            }

            public static int ZbbcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, int m, int p, int q, double* theta, double* phi, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, double* b11d, double* b11e, double* b12d, double* b12e, double* b21d, double* b21e, double* b22d, double* b22e, double* rwork, int lrwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork);

                return OpenBLAS.LAPACKE.ZbbcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, m, p, q, theta, phi, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, b11d, b11e, b12d, b12e, b21d, b21e, b22d, b22e, rwork, lrwork);
            }

            public static int Sbdsdc(MatrixLayout matrixLayout, UpLo uplo, sbyte compq, int n, float* d, float* e, float* u, int ldU, float* vt, int ldvt, float* q, int* iq)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sbdsdc(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq);

                return OpenBLAS.LAPACKE.Sbdsdc(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq);
            }

            public static int Dbdsdc(MatrixLayout matrixLayout, UpLo uplo, sbyte compq, int n, double* d, double* e, double* u, int ldU, double* vt, int ldvt, double* q, int* iq)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dbdsdc(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq);

                return OpenBLAS.LAPACKE.Dbdsdc(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq);
            }

            public static int SbdsdcWork(MatrixLayout matrixLayout, UpLo uplo, sbyte compq, int n, float* d, float* e, float* u, int ldU, float* vt, int ldvt, float* q, int* iq, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SbdsdcWork(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq, work, iwork);

                return OpenBLAS.LAPACKE.SbdsdcWork(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq, work, iwork);
            }

            public static int DbdsdcWork(MatrixLayout matrixLayout, UpLo uplo, sbyte compq, int n, double* d, double* e, double* u, int ldU, double* vt, int ldvt, double* q, int* iq, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DbdsdcWork(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq, work, iwork);

                return OpenBLAS.LAPACKE.DbdsdcWork(matrixLayout, uplo, compq, n, d, e, u, ldU, vt, ldvt, q, iq, work, iwork);
            }

            public static int Sbdsqr(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, float* d, float* e, float* vt, int ldvt, float* u, int ldU, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);

                return OpenBLAS.LAPACKE.Sbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);
            }

            public static int Dbdsqr(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, double* d, double* e, double* vt, int ldvt, double* u, int ldU, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);

                return OpenBLAS.LAPACKE.Dbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);
            }

            public static int Cbdsqr(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, float* d, float* e, System.IntPtr vt, int ldvt, System.IntPtr u, int ldU, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);

                return OpenBLAS.LAPACKE.Cbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);
            }

            public static int Zbdsqr(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, double* d, double* e, System.IntPtr vt, int ldvt, System.IntPtr u, int ldU, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);

                return OpenBLAS.LAPACKE.Zbdsqr(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC);
            }

            public static int SbdsqrWork(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, float* d, float* e, float* vt, int ldvt, float* u, int ldU, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);

                return OpenBLAS.LAPACKE.SbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);
            }

            public static int DbdsqrWork(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, double* d, double* e, double* vt, int ldvt, double* u, int ldU, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);

                return OpenBLAS.LAPACKE.DbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);
            }

            public static int CbdsqrWork(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, float* d, float* e, System.IntPtr vt, int ldvt, System.IntPtr u, int ldU, System.IntPtr c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);

                return OpenBLAS.LAPACKE.CbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);
            }

            public static int ZbdsqrWork(MatrixLayout matrixLayout, UpLo uplo, int n, int ncvt, int nru, int ncc, double* d, double* e, System.IntPtr vt, int ldvt, System.IntPtr u, int ldU, System.IntPtr c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);

                return OpenBLAS.LAPACKE.ZbdsqrWork(matrixLayout, uplo, n, ncvt, nru, ncc, d, e, vt, ldvt, u, ldU, c, ldC, work);
            }

            public static int Sbdsvdx(MatrixLayout matrixLayout, UpLo uplo, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* ns, float* s, float* z, int ldZ, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sbdsvdx(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, superb);

                return OpenBLAS.LAPACKE.Sbdsvdx(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, superb);
            }

            public static int Dbdsvdx(MatrixLayout matrixLayout, UpLo uplo, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* ns, double* s, double* z, int ldZ, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dbdsvdx(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, superb);

                return OpenBLAS.LAPACKE.Dbdsvdx(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, superb);
            }

            public static int SbdsvdxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* ns, float* s, float* z, int ldZ, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SbdsvdxWork(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, work, iwork);

                return OpenBLAS.LAPACKE.SbdsvdxWork(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, work, iwork);
            }

            public static int DbdsvdxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* ns, double* s, double* z, int ldZ, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DbdsvdxWork(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, work, iwork);

                return OpenBLAS.LAPACKE.DbdsvdxWork(matrixLayout, uplo, jobz, range, n, d, e, vl, vu, il, iu, ns, s, z, ldZ, work, iwork);
            }

            public static int Zcgesv(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zcgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, iter);

                return OpenBLAS.LAPACKE.Zcgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, iter);
            }

            public static int ZcgesvWork(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, System.IntPtr work, System.IntPtr swork, double* rwork, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZcgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, work, swork, rwork, iter);

                return OpenBLAS.LAPACKE.ZcgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, work, swork, rwork, iter);
            }

            public static int Zcposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zcposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, iter);

                return OpenBLAS.LAPACKE.Zcposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, iter);
            }

            public static int ZcposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, System.IntPtr work, System.IntPtr swork, double* rwork, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZcposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, work, swork, rwork, iter);

                return OpenBLAS.LAPACKE.ZcposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, work, swork, rwork, iter);
            }

            public static int Sdisna(sbyte job, int m, int n, float* d, float* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sdisna(job, m, n, d, sep);

                return OpenBLAS.LAPACKE.Sdisna(job, m, n, d, sep);
            }

            public static int Ddisna(sbyte job, int m, int n, double* d, double* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ddisna(job, m, n, d, sep);

                return OpenBLAS.LAPACKE.Ddisna(job, m, n, d, sep);
            }

            public static int SdisnaWork(sbyte job, int m, int n, float* d, float* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SdisnaWork(job, m, n, d, sep);

                return OpenBLAS.LAPACKE.SdisnaWork(job, m, n, d, sep);
            }

            public static int DdisnaWork(sbyte job, int m, int n, double* d, double* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DdisnaWork(job, m, n, d, sep);

                return OpenBLAS.LAPACKE.DdisnaWork(job, m, n, d, sep);
            }

            public static void SetNancheck(int flag)
            {
                if (MKL.IsSupoprted)
                {
                    MKL.LAPACKE.SetNancheck(flag);
                    return;
                }
                OpenBLAS.LAPACKE.SetNancheck(flag);
            }

            public static int GetNancheck()
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.GetNancheck();

                return OpenBLAS.LAPACKE.GetNancheck();
            }

            public static int Sgbbrd(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, float* ab, int ldab, float* d, float* e, float* q, int ldQ, float* pt, int ldpt, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);

                return OpenBLAS.LAPACKE.Sgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);
            }

            public static int Dgbbrd(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, double* ab, int ldab, double* d, double* e, double* q, int ldQ, double* pt, int ldpt, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);

                return OpenBLAS.LAPACKE.Dgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);
            }

            public static int Cgbbrd(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, System.IntPtr ab, int ldab, float* d, float* e, System.IntPtr q, int ldQ, System.IntPtr pt, int ldpt, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);

                return OpenBLAS.LAPACKE.Cgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);
            }

            public static int Zgbbrd(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, System.IntPtr ab, int ldab, double* d, double* e, System.IntPtr q, int ldQ, System.IntPtr pt, int ldpt, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);

                return OpenBLAS.LAPACKE.Zgbbrd(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC);
            }

            public static int SgbbrdWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, float* ab, int ldab, float* d, float* e, float* q, int ldQ, float* pt, int ldpt, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work);

                return OpenBLAS.LAPACKE.SgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work);
            }

            public static int DgbbrdWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, double* ab, int ldab, double* d, double* e, double* q, int ldQ, double* pt, int ldpt, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work);

                return OpenBLAS.LAPACKE.DgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work);
            }

            public static int CgbbrdWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, System.IntPtr ab, int ldab, float* d, float* e, System.IntPtr q, int ldQ, System.IntPtr pt, int ldpt, System.IntPtr c, int ldC, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work, rwork);

                return OpenBLAS.LAPACKE.CgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work, rwork);
            }

            public static int ZgbbrdWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int ncc, int kl, int ku, System.IntPtr ab, int ldab, double* d, double* e, System.IntPtr q, int ldQ, System.IntPtr pt, int ldpt, System.IntPtr c, int ldC, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work, rwork);

                return OpenBLAS.LAPACKE.ZgbbrdWork(matrixLayout, vect, m, n, ncc, kl, ku, ab, ldab, d, e, q, ldQ, pt, ldpt, c, ldC, work, rwork);
            }

            public static int Sgbcon(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, float* ab, int ldab, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Sgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);
            }

            public static int Dgbcon(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, double* ab, int ldab, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Dgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);
            }

            public static int Cgbcon(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Cgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);
            }

            public static int Zgbcon(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zgbcon(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond);
            }

            public static int SgbconWork(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, float* ab, int ldab, int* ipiv, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork);
            }

            public static int DgbconWork(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, double* ab, int ldab, int* ipiv, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, iwork);
            }

            public static int CgbconWork(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv, float anorm, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork);
            }

            public static int ZgbconWork(MatrixLayout matrixLayout, sbyte norm, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv, double anorm, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZgbconWork(matrixLayout, norm, n, kl, ku, ab, ldab, ipiv, anorm, rcond, work, rwork);
            }

            public static int Sgbequ(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Sgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Dgbequ(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Dgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Cgbequ(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Cgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Zgbequ(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Zgbequ(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Sgbequb(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Sgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Dgbequb(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Dgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Cgbequb(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Cgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Zgbequb(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Zgbequb(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int SgbequbWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.SgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int DgbequbWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.DgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int CgbequbWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.CgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int ZgbequbWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.ZgbequbWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int SgbequWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.SgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int DgbequWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.DgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int CgbequWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.CgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int ZgbequWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.ZgbequWork(matrixLayout, m, n, kl, ku, ab, ldab, r, c, rowcnd, colcnd, amax);
            }

            public static int Sgbrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Sgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dgbrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cgbrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zgbrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zgbrfs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int SgbrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DgbrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CgbrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZgbrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgbrfsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sgbrfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dgbrfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cgbrfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zgbrfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zgbrfsx(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SgbrfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DgbrfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CgbrfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZgbrfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZgbrfsxWork(matrixLayout, trans, equed, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Sgbsv(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, float* ab, int ldab, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Dgbsv(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, double* ab, int ldab, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Cgbsv(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Zgbsv(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zgbsv(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int SgbsvWork(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, float* ab, int ldab, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int DgbsvWork(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, double* ab, int ldab, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int CgbsvWork(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int ZgbsvWork(MatrixLayout matrixLayout, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZgbsvWork(matrixLayout, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Sgbsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Sgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Dgbsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Dgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Cgbsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, float* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Cgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Zgbsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, double* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Zgbsvx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int SgbsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DgbsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CgbsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZgbsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgbsvxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Sgbsvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dgbsvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cgbsvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zgbsvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zgbsvxx(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SgbsvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, float* afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DgbsvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, double* afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CgbsvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZgbsvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZgbsvxxWork(matrixLayout, fact, trans, n, kl, ku, nrhs, ab, ldab, afb, ldafb, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Sgbtrf(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.Sgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int Dgbtrf(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.Dgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int Cgbtrf(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.Cgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int Zgbtrf(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.Zgbtrf(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int SgbtrfWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.SgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int DgbtrfWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.DgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int CgbtrfWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.CgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int ZgbtrfWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, System.IntPtr ab, int ldab, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);

                return OpenBLAS.LAPACKE.ZgbtrfWork(matrixLayout, m, n, kl, ku, ab, ldab, ipiv);
            }

            public static int Sgbtrs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Dgbtrs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Cgbtrs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Zgbtrs(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zgbtrs(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int SgbtrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, float* ab, int ldab, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int DgbtrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, double* ab, int ldab, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int CgbtrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int ZgbtrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int kl, int ku, int nrhs, System.IntPtr ab, int ldab, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZgbtrsWork(matrixLayout, trans, n, kl, ku, nrhs, ab, ldab, ipiv, b, ldB);
            }

            public static int Sgebak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* scale, int m, float* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.Sgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int Dgebak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* scale, int m, double* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.Dgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int Cgebak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* scale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.Cgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int Zgebak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* scale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.Zgebak(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int SgebakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* scale, int m, float* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.SgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int DgebakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* scale, int m, double* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.DgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int CgebakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* scale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.CgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int ZgebakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* scale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);

                return OpenBLAS.LAPACKE.ZgebakWork(matrixLayout, job, side, n, ilo, ihi, scale, m, v, ldV);
            }

            public static int Sgebal(MatrixLayout matrixLayout, sbyte job, int n, float* a, int ldA, int* ilo, int* ihi, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.Sgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int Dgebal(MatrixLayout matrixLayout, sbyte job, int n, double* a, int ldA, int* ilo, int* ihi, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.Dgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int Cgebal(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, int* ilo, int* ihi, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.Cgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int Zgebal(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, int* ilo, int* ihi, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.Zgebal(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int SgebalWork(MatrixLayout matrixLayout, sbyte job, int n, float* a, int ldA, int* ilo, int* ihi, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.SgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int DgebalWork(MatrixLayout matrixLayout, sbyte job, int n, double* a, int ldA, int* ilo, int* ihi, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.DgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int CgebalWork(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, int* ilo, int* ihi, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.CgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int ZgebalWork(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, int* ilo, int* ihi, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);

                return OpenBLAS.LAPACKE.ZgebalWork(matrixLayout, job, n, a, ldA, ilo, ihi, scale);
            }

            public static int Sgebrd(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* d, float* e, float* tauq, float* taup)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);

                return OpenBLAS.LAPACKE.Sgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);
            }

            public static int Dgebrd(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* d, double* e, double* tauq, double* taup)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);

                return OpenBLAS.LAPACKE.Dgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);
            }

            public static int Cgebrd(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* d, float* e, System.IntPtr tauq, System.IntPtr taup)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);

                return OpenBLAS.LAPACKE.Cgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);
            }

            public static int Zgebrd(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* d, double* e, System.IntPtr tauq, System.IntPtr taup)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);

                return OpenBLAS.LAPACKE.Zgebrd(matrixLayout, m, n, a, ldA, d, e, tauq, taup);
            }

            public static int SgebrdWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* d, float* e, float* tauq, float* taup, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);

                return OpenBLAS.LAPACKE.SgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);
            }

            public static int DgebrdWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* d, double* e, double* tauq, double* taup, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);

                return OpenBLAS.LAPACKE.DgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);
            }

            public static int CgebrdWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* d, float* e, System.IntPtr tauq, System.IntPtr taup, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);

                return OpenBLAS.LAPACKE.CgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);
            }

            public static int ZgebrdWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* d, double* e, System.IntPtr tauq, System.IntPtr taup, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);

                return OpenBLAS.LAPACKE.ZgebrdWork(matrixLayout, m, n, a, ldA, d, e, tauq, taup, work, lwork);
            }

            public static int Sgecon(MatrixLayout matrixLayout, sbyte norm, int n, float* a, int ldA, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Sgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);
            }

            public static int Dgecon(MatrixLayout matrixLayout, sbyte norm, int n, double* a, int ldA, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Dgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);
            }

            public static int Cgecon(MatrixLayout matrixLayout, sbyte norm, int n, System.IntPtr a, int ldA, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Cgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);
            }

            public static int Zgecon(MatrixLayout matrixLayout, sbyte norm, int n, System.IntPtr a, int ldA, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Zgecon(matrixLayout, norm, n, a, ldA, anorm, rcond);
            }

            public static int SgeconWork(MatrixLayout matrixLayout, sbyte norm, int n, float* a, int ldA, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, iwork);
            }

            public static int DgeconWork(MatrixLayout matrixLayout, sbyte norm, int n, double* a, int ldA, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, iwork);
            }

            public static int CgeconWork(MatrixLayout matrixLayout, sbyte norm, int n, System.IntPtr a, int ldA, float anorm, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, rwork);
            }

            public static int ZgeconWork(MatrixLayout matrixLayout, sbyte norm, int n, System.IntPtr a, int ldA, double anorm, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZgeconWork(matrixLayout, norm, n, a, ldA, anorm, rcond, work, rwork);
            }

            public static int Sgeequ(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Sgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Dgeequ(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Dgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Cgeequ(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Cgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Zgeequ(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Zgeequ(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Sgeequb(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Sgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Dgeequb(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Dgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Cgeequb(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Cgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Zgeequb(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.Zgeequb(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int SgeequbWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.SgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int DgeequbWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.DgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int CgeequbWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.CgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int ZgeequbWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.ZgeequbWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int SgeequWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.SgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int DgeequWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.DgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int CgeequWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* r, float* c, float* rowcnd, float* colcnd, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.CgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int ZgeequWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* r, double* c, double* rowcnd, double* colcnd, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);

                return OpenBLAS.LAPACKE.ZgeequWork(matrixLayout, m, n, a, ldA, r, c, rowcnd, colcnd, amax);
            }

            public static int Sgees(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, float* a, int ldA, int* sdim, float* wr, float* wi, float* vs, int ldvs)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs);

                return OpenBLAS.LAPACKE.Sgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs);
            }

            public static int Dgees(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, double* a, int ldA, int* sdim, double* wr, double* wi, double* vs, int ldvs)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs);

                return OpenBLAS.LAPACKE.Dgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs);
            }

            public static int Cgees(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs);

                return OpenBLAS.LAPACKE.Cgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs);
            }

            public static int Zgees(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs);

                return OpenBLAS.LAPACKE.Zgees(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs);
            }

            public static int SgeesWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, float* a, int ldA, int* sdim, float* wr, float* wi, float* vs, int ldvs, float* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs, work, lwork, bwork);

                return OpenBLAS.LAPACKE.SgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs, work, lwork, bwork);
            }

            public static int DgeesWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, double* a, int ldA, int* sdim, double* wr, double* wi, double* vs, int ldvs, double* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs, work, lwork, bwork);

                return OpenBLAS.LAPACKE.DgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, wr, wi, vs, ldvs, work, lwork, bwork);
            }

            public static int CgeesWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, System.IntPtr work, int lwork, float* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.CgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs, work, lwork, rwork, bwork);
            }

            public static int ZgeesWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, System.IntPtr work, int lwork, double* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.ZgeesWork(matrixLayout, jobvs, sort, select, n, a, ldA, sdim, w, vs, ldvs, work, lwork, rwork, bwork);
            }

            public static int Sgeesx(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, float* a, int ldA, int* sdim, float* wr, float* wi, float* vs, int ldvs, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv);

                return OpenBLAS.LAPACKE.Sgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv);
            }

            public static int Dgeesx(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, double* a, int ldA, int* sdim, double* wr, double* wi, double* vs, int ldvs, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv);

                return OpenBLAS.LAPACKE.Dgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv);
            }

            public static int Cgeesx(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv);

                return OpenBLAS.LAPACKE.Cgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv);
            }

            public static int Zgeesx(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv);

                return OpenBLAS.LAPACKE.Zgeesx(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv);
            }

            public static int SgeesxWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, float* a, int ldA, int* sdim, float* wr, float* wi, float* vs, int ldvs, float* rconde, float* rcondv, float* work, int lwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.SgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork);
            }

            public static int DgeesxWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, double* a, int ldA, int* sdim, double* wr, double* wi, double* vs, int ldvs, double* rconde, double* rcondv, double* work, int lwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.DgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, wr, wi, vs, ldvs, rconde, rcondv, work, lwork, iwork, liwork, bwork);
            }

            public static int CgeesxWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, float* rconde, float* rcondv, System.IntPtr work, int lwork, float* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.CgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork);
            }

            public static int ZgeesxWork(MatrixLayout matrixLayout, sbyte jobvs, sbyte sort, System.IntPtr select, sbyte sense, int n, System.IntPtr a, int ldA, int* sdim, System.IntPtr w, System.IntPtr vs, int ldvs, double* rconde, double* rcondv, System.IntPtr work, int lwork, double* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.ZgeesxWork(matrixLayout, jobvs, sort, select, sense, n, a, ldA, sdim, w, vs, ldvs, rconde, rcondv, work, lwork, rwork, bwork);
            }

            public static int Sgeev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeev(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Sgeev(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr);
            }

            public static int Dgeev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeev(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Dgeev(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr);
            }

            public static int Cgeev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeev(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Cgeev(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr);
            }

            public static int Zgeev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeev(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Zgeev(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr);
            }

            public static int SgeevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.SgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int DgeevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.DgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int CgeevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int ZgeevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZgeevWork(matrixLayout, jobvl, jobvr, n, a, ldA, w, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int Sgeevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, float* a, int ldA, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr, int* ilo, int* ihi, float* scale, float* abnrm, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Sgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);
            }

            public static int Dgeevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, double* a, int ldA, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr, int* ilo, int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Dgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);
            }

            public static int Cgeevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, float* scale, float* abnrm, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Cgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);
            }

            public static int Zgeevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Zgeevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv);
            }

            public static int SgeevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, float* a, int ldA, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr, int* ilo, int* ihi, float* scale, float* abnrm, float* rconde, float* rcondv, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork);
            }

            public static int DgeevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, double* a, int ldA, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr, int* ilo, int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, wr, wi, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, iwork);
            }

            public static int CgeevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, float* scale, float* abnrm, float* rconde, float* rcondv, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork);
            }

            public static int ZgeevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, double* scale, double* abnrm, double* rconde, double* rcondv, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZgeevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, w, vl, ldvl, vr, ldvr, ilo, ihi, scale, abnrm, rconde, rcondv, work, lwork, rwork);
            }

            public static int Sgehrd(MatrixLayout matrixLayout, int n, int ilo, int ihi, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int Dgehrd(MatrixLayout matrixLayout, int n, int ilo, int ihi, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int Cgehrd(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int Zgehrd(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgehrd(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int SgehrdWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int DgehrdWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int CgehrdWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int ZgehrdWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgehrdWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int Sgejsv(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, float* a, int ldA, float* sva, float* u, int ldU, float* v, int ldV, float* stat, int* istat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);

                return OpenBLAS.LAPACKE.Sgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);
            }

            public static int Dgejsv(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, double* a, int ldA, double* sva, double* u, int ldU, double* v, int ldV, double* stat, int* istat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);

                return OpenBLAS.LAPACKE.Dgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);
            }

            public static int Cgejsv(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, System.IntPtr a, int ldA, float* sva, System.IntPtr u, int ldU, System.IntPtr v, int ldV, float* stat, int* istat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);

                return OpenBLAS.LAPACKE.Cgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);
            }

            public static int Zgejsv(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, System.IntPtr a, int ldA, double* sva, System.IntPtr u, int ldU, System.IntPtr v, int ldV, double* stat, int* istat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);

                return OpenBLAS.LAPACKE.Zgejsv(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, stat, istat);
            }

            public static int SgejsvWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, float* a, int ldA, float* sva, float* u, int ldU, float* v, int ldV, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, work, lwork, iwork);
            }

            public static int DgejsvWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, double* a, int ldA, double* sva, double* u, int ldU, double* v, int ldV, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, work, lwork, iwork);
            }

            public static int CgejsvWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, System.IntPtr a, int ldA, float* sva, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr cwork, int lwork, float* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, cwork, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.CgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, cwork, lwork, rwork, lrwork, iwork);
            }

            public static int ZgejsvWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, sbyte jobr, sbyte jobt, sbyte jobp, int m, int n, System.IntPtr a, int ldA, double* sva, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr cwork, int lwork, double* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, cwork, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.ZgejsvWork(matrixLayout, joba, jobu, jobv, jobr, jobt, jobp, m, n, a, ldA, sva, u, ldU, v, ldV, cwork, lwork, rwork, lrwork, iwork);
            }

            public static int Sgelq(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelq(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Sgelq(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Dgelq(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelq(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Dgelq(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Cgelq(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelq(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Cgelq(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Zgelq(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelq(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Zgelq(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Sgelq2(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelq2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgelq2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgelq2(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelq2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgelq2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgelq2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelq2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgelq2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgelq2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelq2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgelq2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Sgelq2Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelq2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Sgelq2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Dgelq2Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelq2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Dgelq2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Cgelq2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelq2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Cgelq2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Zgelq2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelq2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Zgelq2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Sgelqf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgelqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgelqf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgelqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgelqf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgelqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgelqf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgelqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int SgelqfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DgelqfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CgelqfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZgelqfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgelqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int SgelqWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int tsize, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.SgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int DgelqWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int tsize, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.DgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int CgelqWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.CgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int ZgelqWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.ZgelqWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int Sgels(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Sgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Dgels(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Cgels(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Cgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Zgels(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zgels(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Sgelsd(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* s, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Sgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Dgelsd(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* s, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Dgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Cgelsd(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* s, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Cgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Zgelsd(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* s, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Zgelsd(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int SgelsdWork(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* s, float rcond, int* rank, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, iwork);
            }

            public static int DgelsdWork(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* s, double rcond, int* rank, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, iwork);
            }

            public static int CgelsdWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* s, float rcond, int* rank, System.IntPtr work, int lwork, float* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.CgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork, iwork);
            }

            public static int ZgelsdWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* s, double rcond, int* rank, System.IntPtr work, int lwork, double* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.ZgelsdWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork, iwork);
            }

            public static int Sgelss(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* s, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Sgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Dgelss(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* s, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Dgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Cgelss(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* s, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Cgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int Zgelss(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* s, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);

                return OpenBLAS.LAPACKE.Zgelss(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank);
            }

            public static int SgelssWork(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* s, float rcond, int* rank, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork);

                return OpenBLAS.LAPACKE.SgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork);
            }

            public static int DgelssWork(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* s, double rcond, int* rank, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork);

                return OpenBLAS.LAPACKE.DgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork);
            }

            public static int CgelssWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* s, float rcond, int* rank, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork);
            }

            public static int ZgelssWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* s, double rcond, int* rank, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZgelssWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, s, rcond, rank, work, lwork, rwork);
            }

            public static int SgelsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int DgelsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int CgelsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int ZgelsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZgelsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int Sgelsy(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, int* jpvt, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);

                return OpenBLAS.LAPACKE.Sgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);
            }

            public static int Dgelsy(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, int* jpvt, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);

                return OpenBLAS.LAPACKE.Dgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);
            }

            public static int Cgelsy(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* jpvt, float rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);

                return OpenBLAS.LAPACKE.Cgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);
            }

            public static int Zgelsy(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* jpvt, double rcond, int* rank)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);

                return OpenBLAS.LAPACKE.Zgelsy(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank);
            }

            public static int SgelsyWork(MatrixLayout matrixLayout, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, int* jpvt, float rcond, int* rank, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork);

                return OpenBLAS.LAPACKE.SgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork);
            }

            public static int DgelsyWork(MatrixLayout matrixLayout, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, int* jpvt, double rcond, int* rank, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork);

                return OpenBLAS.LAPACKE.DgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork);
            }

            public static int CgelsyWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* jpvt, float rcond, int* rank, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork, rwork);
            }

            public static int ZgelsyWork(MatrixLayout matrixLayout, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* jpvt, double rcond, int* rank, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZgelsyWork(matrixLayout, m, n, nrhs, a, ldA, b, ldB, jpvt, rcond, rank, work, lwork, rwork);
            }

            public static int Sgemlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* t, int tsize, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Sgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Dgemlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* t, int tsize, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Dgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Cgemlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Cgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Zgemlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Zgemlq(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int SgemlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* t, int tsize, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int DgemlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* t, int tsize, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int CgemlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int ZgemlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZgemlqWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int Sgemqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* t, int tsize, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Sgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Dgemqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* t, int tsize, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Dgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Cgemqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Cgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Zgemqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);

                return OpenBLAS.LAPACKE.Zgemqr(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC);
            }

            public static int Sgemqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, float* v, int ldV, float* t, int ldT, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Sgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);
            }

            public static int Dgemqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, double* v, int ldV, double* t, int ldT, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Dgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);
            }

            public static int Cgemqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Cgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);
            }

            public static int Zgemqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Zgemqrt(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC);
            }

            public static int SgemqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, float* v, int ldV, float* t, int ldT, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);

                return OpenBLAS.LAPACKE.SgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);
            }

            public static int DgemqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, double* v, int ldV, double* t, int ldT, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);

                return OpenBLAS.LAPACKE.DgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);
            }

            public static int CgemqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);

                return OpenBLAS.LAPACKE.CgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);
            }

            public static int ZgemqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);

                return OpenBLAS.LAPACKE.ZgemqrtWork(matrixLayout, side, trans, m, n, k, nb, v, ldV, t, ldT, c, ldC, work);
            }

            public static int SgemqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* t, int tsize, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int DgemqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* t, int tsize, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int CgemqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int ZgemqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZgemqrWork(matrixLayout, side, trans, m, n, k, a, ldA, t, tsize, c, ldC, work, lwork);
            }

            public static int Sgeqlf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqlf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgeqlf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgeqlf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqlf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgeqlf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgeqlf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqlf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgeqlf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgeqlf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqlf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgeqlf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int SgeqlfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DgeqlfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CgeqlfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZgeqlfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgeqlfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int Sgeqp3(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* jpvt, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Sgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Dgeqp3(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* jpvt, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Dgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Cgeqp3(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Cgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Zgeqp3(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Zgeqp3(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Sgeqp3Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* jpvt, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork);

                return OpenBLAS.LAPACKE.Sgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork);
            }

            public static int Dgeqp3Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* jpvt, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork);

                return OpenBLAS.LAPACKE.Dgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork);
            }

            public static int Cgeqp3Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Cgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork, rwork);
            }

            public static int Zgeqp3Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Zgeqp3Work(matrixLayout, m, n, a, ldA, jpvt, tau, work, lwork, rwork);
            }

            public static int Sgeqpf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* jpvt, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Sgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Dgeqpf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* jpvt, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Dgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Cgeqpf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Cgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int Zgeqpf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);

                return OpenBLAS.LAPACKE.Zgeqpf(matrixLayout, m, n, a, ldA, jpvt, tau);
            }

            public static int SgeqpfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* jpvt, float* tau, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work);

                return OpenBLAS.LAPACKE.SgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work);
            }

            public static int DgeqpfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* jpvt, double* tau, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work);

                return OpenBLAS.LAPACKE.DgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work);
            }

            public static int CgeqpfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work, rwork);

                return OpenBLAS.LAPACKE.CgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work, rwork);
            }

            public static int ZgeqpfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* jpvt, System.IntPtr tau, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work, rwork);

                return OpenBLAS.LAPACKE.ZgeqpfWork(matrixLayout, m, n, a, ldA, jpvt, tau, work, rwork);
            }

            public static int Sgeqr(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqr(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Sgeqr(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Dgeqr(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqr(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Dgeqr(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Cgeqr(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqr(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Cgeqr(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Zgeqr(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqr(matrixLayout, m, n, a, ldA, t, tsize);

                return OpenBLAS.LAPACKE.Zgeqr(matrixLayout, m, n, a, ldA, t, tsize);
            }

            public static int Sgeqr2(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqr2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgeqr2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgeqr2(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqr2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgeqr2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgeqr2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqr2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgeqr2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgeqr2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqr2(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgeqr2(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Sgeqr2Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Sgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Dgeqr2Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Dgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Cgeqr2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Cgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Zgeqr2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);

                return OpenBLAS.LAPACKE.Zgeqr2Work(matrixLayout, m, n, a, ldA, tau, work);
            }

            public static int Sgeqrf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgeqrf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgeqrf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgeqrf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgeqrf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgeqrf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgeqrf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgeqrf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Sgeqrfp(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrfp(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgeqrfp(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgeqrfp(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrfp(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgeqrfp(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgeqrfp(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrfp(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgeqrfp(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgeqrfp(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrfp(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgeqrfp(matrixLayout, m, n, a, ldA, tau);
            }

            public static int SgeqrfpWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DgeqrfpWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CgeqrfpWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZgeqrfpWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgeqrfpWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int SgeqrfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DgeqrfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CgeqrfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZgeqrfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgeqrfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int Sgeqrt(MatrixLayout matrixLayout, int m, int n, int nb, float* a, int ldA, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Sgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);
            }

            public static int Dgeqrt(MatrixLayout matrixLayout, int m, int n, int nb, double* a, int ldA, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Dgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);
            }

            public static int Cgeqrt(MatrixLayout matrixLayout, int m, int n, int nb, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Cgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);
            }

            public static int Zgeqrt(MatrixLayout matrixLayout, int m, int n, int nb, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Zgeqrt(matrixLayout, m, n, nb, a, ldA, t, ldT);
            }

            public static int Sgeqrt2(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Sgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Dgeqrt2(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Dgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Cgeqrt2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Cgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Zgeqrt2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Zgeqrt2(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Sgeqrt2Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Sgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Dgeqrt2Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Dgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Cgeqrt2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Cgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Zgeqrt2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Zgeqrt2Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Sgeqrt3(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Sgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Dgeqrt3(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Dgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Cgeqrt3(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Cgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Zgeqrt3(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Zgeqrt3(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Sgeqrt3Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Sgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Dgeqrt3Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Dgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Cgeqrt3Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Cgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int Zgeqrt3Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);

                return OpenBLAS.LAPACKE.Zgeqrt3Work(matrixLayout, m, n, a, ldA, t, ldT);
            }

            public static int SgeqrtWork(MatrixLayout matrixLayout, int m, int n, int nb, float* a, int ldA, float* t, int ldT, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);

                return OpenBLAS.LAPACKE.SgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);
            }

            public static int DgeqrtWork(MatrixLayout matrixLayout, int m, int n, int nb, double* a, int ldA, double* t, int ldT, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);

                return OpenBLAS.LAPACKE.DgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);
            }

            public static int CgeqrtWork(MatrixLayout matrixLayout, int m, int n, int nb, System.IntPtr a, int ldA, System.IntPtr t, int ldT, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);

                return OpenBLAS.LAPACKE.CgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);
            }

            public static int ZgeqrtWork(MatrixLayout matrixLayout, int m, int n, int nb, System.IntPtr a, int ldA, System.IntPtr t, int ldT, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);

                return OpenBLAS.LAPACKE.ZgeqrtWork(matrixLayout, m, n, nb, a, ldA, t, ldT, work);
            }

            public static int SgeqrWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* t, int tsize, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.SgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int DgeqrWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* t, int tsize, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.DgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int CgeqrWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.CgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int ZgeqrWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr t, int tsize, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);

                return OpenBLAS.LAPACKE.ZgeqrWork(matrixLayout, m, n, a, ldA, t, tsize, work, lwork);
            }

            public static int Sgerfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Sgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dgerfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cgerfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zgerfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zgerfs(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int SgerfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DgerfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CgerfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZgerfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgerfsWork(matrixLayout, trans, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sgerfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dgerfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cgerfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zgerfsx(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zgerfsx(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SgerfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DgerfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CgerfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZgerfsxWork(MatrixLayout matrixLayout, TransLapack trans, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZgerfsxWork(matrixLayout, trans, equed, n, nrhs, a, ldA, af, ldaf, ipiv, r, c, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Sgerqf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgerqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sgerqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dgerqf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgerqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dgerqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Cgerqf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgerqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cgerqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Zgerqf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgerqf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zgerqf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int SgerqfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DgerqfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CgerqfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZgerqfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZgerqfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int Sgesdd(MatrixLayout matrixLayout, sbyte jobz, int m, int n, float* a, int ldA, float* s, float* u, int ldU, float* vt, int ldvt)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);

                return OpenBLAS.LAPACKE.Sgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);
            }

            public static int Dgesdd(MatrixLayout matrixLayout, sbyte jobz, int m, int n, double* a, int ldA, double* s, double* u, int ldU, double* vt, int ldvt)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);

                return OpenBLAS.LAPACKE.Dgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);
            }

            public static int Cgesdd(MatrixLayout matrixLayout, sbyte jobz, int m, int n, System.IntPtr a, int ldA, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);

                return OpenBLAS.LAPACKE.Cgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);
            }

            public static int Zgesdd(MatrixLayout matrixLayout, sbyte jobz, int m, int n, System.IntPtr a, int ldA, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);

                return OpenBLAS.LAPACKE.Zgesdd(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt);
            }

            public static int SgesddWork(MatrixLayout matrixLayout, sbyte jobz, int m, int n, float* a, int ldA, float* s, float* u, int ldU, float* vt, int ldvt, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, iwork);
            }

            public static int DgesddWork(MatrixLayout matrixLayout, sbyte jobz, int m, int n, double* a, int ldA, double* s, double* u, int ldU, double* vt, int ldvt, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, iwork);
            }

            public static int CgesddWork(MatrixLayout matrixLayout, sbyte jobz, int m, int n, System.IntPtr a, int ldA, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, float* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.CgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);
            }

            public static int ZgesddWork(MatrixLayout matrixLayout, sbyte jobz, int m, int n, System.IntPtr a, int ldA, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, double* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.ZgesddWork(matrixLayout, jobz, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);
            }

            public static int Sgesv(MatrixLayout matrixLayout, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Dgesv(MatrixLayout matrixLayout, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Cgesv(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zgesv(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Sgesvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, float* a, int ldA, float* s, float* u, int ldU, float* vt, int ldvt, float* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Sgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);
            }

            public static int Dgesvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, double* a, int ldA, double* s, double* u, int ldU, double* vt, int ldvt, double* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Dgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);
            }

            public static int Cgesvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, System.IntPtr a, int ldA, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, float* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Cgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);
            }

            public static int Zgesvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, System.IntPtr a, int ldA, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, double* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Zgesvd(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, superb);
            }

            public static int SgesvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, float* a, int ldA, float* s, float* u, int ldU, float* vt, int ldvt, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork);

                return OpenBLAS.LAPACKE.SgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork);
            }

            public static int DgesvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, double* a, int ldA, double* s, double* u, int ldU, double* vt, int ldvt, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork);

                return OpenBLAS.LAPACKE.DgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork);
            }

            public static int CgesvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, System.IntPtr a, int ldA, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork);
            }

            public static int ZgesvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, int m, int n, System.IntPtr a, int ldA, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZgesvdWork(matrixLayout, jobu, jobvt, m, n, a, ldA, s, u, ldU, vt, ldvt, work, lwork, rwork);
            }

            public static int Sgesvdx(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, float* a, int ldA, float vl, float vu, int il, int iu, int* ns, float* s, float* u, int ldU, float* vt, int ldvt, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Sgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);
            }

            public static int Dgesvdx(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, double* a, int ldA, double vl, double vu, int il, int iu, int* ns, double* s, double* u, int ldU, double* vt, int ldvt, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Dgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);
            }

            public static int Cgesvdx(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, int* ns, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Cgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);
            }

            public static int Zgesvdx(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, int* ns, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, int* superb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);

                return OpenBLAS.LAPACKE.Zgesvdx(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, superb);
            }

            public static int SgesvdxWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, float* a, int ldA, float vl, float vu, int il, int iu, int* ns, float* s, float* u, int ldU, float* vt, int ldvt, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, iwork);
            }

            public static int DgesvdxWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, double* a, int ldA, double vl, double vu, int il, int iu, int* ns, double* s, double* u, int ldU, double* vt, int ldvt, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, iwork);
            }

            public static int CgesvdxWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, int* ns, float* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, float* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.CgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);
            }

            public static int ZgesvdxWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobvt, sbyte range, int m, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, int* ns, double* s, System.IntPtr u, int ldU, System.IntPtr vt, int ldvt, System.IntPtr work, int lwork, double* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.ZgesvdxWork(matrixLayout, jobu, jobvt, range, m, n, a, ldA, vl, vu, il, iu, ns, s, u, ldU, vt, ldvt, work, lwork, rwork, iwork);
            }

            public static int Sgesvj(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, float* a, int ldA, float* sva, int mv, float* v, int ldV, float* stat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);

                return OpenBLAS.LAPACKE.Sgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);
            }

            public static int Dgesvj(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, double* a, int ldA, double* sva, int mv, double* v, int ldV, double* stat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);

                return OpenBLAS.LAPACKE.Dgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);
            }

            public static int Cgesvj(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, System.IntPtr a, int ldA, float* sva, int mv, System.IntPtr v, int ldV, float* stat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);

                return OpenBLAS.LAPACKE.Cgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);
            }

            public static int Zgesvj(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, System.IntPtr a, int ldA, double* sva, int mv, System.IntPtr v, int ldV, double* stat)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);

                return OpenBLAS.LAPACKE.Zgesvj(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, stat);
            }

            public static int SgesvjWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, float* a, int ldA, float* sva, int mv, float* v, int ldV, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, work, lwork);

                return OpenBLAS.LAPACKE.SgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, work, lwork);
            }

            public static int DgesvjWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, double* a, int ldA, double* sva, int mv, double* v, int ldV, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, work, lwork);

                return OpenBLAS.LAPACKE.DgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, work, lwork);
            }

            public static int CgesvjWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, System.IntPtr a, int ldA, float* sva, int mv, System.IntPtr v, int ldV, System.IntPtr cwork, int lwork, float* rwork, int lrwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, cwork, lwork, rwork, lrwork);

                return OpenBLAS.LAPACKE.CgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, cwork, lwork, rwork, lrwork);
            }

            public static int ZgesvjWork(MatrixLayout matrixLayout, sbyte joba, sbyte jobu, sbyte jobv, int m, int n, System.IntPtr a, int ldA, double* sva, int mv, System.IntPtr v, int ldV, System.IntPtr cwork, int lwork, double* rwork, int lrwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, cwork, lwork, rwork, lrwork);

                return OpenBLAS.LAPACKE.ZgesvjWork(matrixLayout, joba, jobu, jobv, m, n, a, ldA, sva, mv, v, ldV, cwork, lwork, rwork, lrwork);
            }

            public static int SgesvWork(MatrixLayout matrixLayout, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DgesvWork(MatrixLayout matrixLayout, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CgesvWork(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZgesvWork(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Sgesvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Sgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Dgesvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Dgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Cgesvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, float* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Cgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int Zgesvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, double* rpivot)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);

                return OpenBLAS.LAPACKE.Zgesvx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, rpivot);
            }

            public static int SgesvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DgesvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CgesvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZgesvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgesvxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Sgesvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dgesvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cgesvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zgesvxx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zgesvxx(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SgesvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DgesvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CgesvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* r, float* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZgesvxxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* r, double* c, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZgesvxxWork(matrixLayout, fact, trans, n, nrhs, a, ldA, af, ldaf, ipiv, equed, r, c, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Sgetf2(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Dgetf2(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Cgetf2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Zgetf2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Sgetf2Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Dgetf2Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Cgetf2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Zgetf2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Sgetrf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetrf(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetrf(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Dgetrf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetrf(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetrf(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Cgetrf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetrf(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetrf(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Zgetrf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetrf(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetrf(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Sgetrf2(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetrf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetrf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Dgetrf2(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetrf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetrf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Cgetrf2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetrf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetrf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Zgetrf2(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetrf2(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetrf2(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Sgetrf2Work(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Dgetrf2Work(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Cgetrf2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Zgetrf2Work(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetrf2Work(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int SgetrfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgetrfWork(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.SgetrfWork(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int DgetrfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgetrfWork(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.DgetrfWork(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int CgetrfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgetrfWork(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.CgetrfWork(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int ZgetrfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgetrfWork(matrixLayout, m, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ZgetrfWork(matrixLayout, m, n, a, ldA, ipiv);
            }

            public static int Sgetri(MatrixLayout matrixLayout, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetri(matrixLayout, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Sgetri(matrixLayout, n, a, ldA, ipiv);
            }

            public static int Dgetri(MatrixLayout matrixLayout, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetri(matrixLayout, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dgetri(matrixLayout, n, a, ldA, ipiv);
            }

            public static int Cgetri(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetri(matrixLayout, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Cgetri(matrixLayout, n, a, ldA, ipiv);
            }

            public static int Zgetri(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetri(matrixLayout, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zgetri(matrixLayout, n, a, ldA, ipiv);
            }

            public static int SgetriWork(MatrixLayout matrixLayout, int n, float* a, int ldA, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.SgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);
            }

            public static int DgetriWork(MatrixLayout matrixLayout, int n, double* a, int ldA, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.DgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);
            }

            public static int CgetriWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.CgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZgetriWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZgetriWork(matrixLayout, n, a, ldA, ipiv, work, lwork);
            }

            public static int Sgetrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Dgetrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Cgetrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zgetrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zgetrs(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SgetrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DgetrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CgetrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZgetrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZgetrsWork(matrixLayout, trans, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Sgetsls(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Sgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Dgetsls(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Cgetsls(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Cgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int Zgetsls(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zgetsls(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB);
            }

            public static int SgetslsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int DgetslsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int CgetslsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int ZgetslsWork(MatrixLayout matrixLayout, TransLapack trans, int m, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZgetslsWork(matrixLayout, trans, m, n, nrhs, a, ldA, b, ldB, work, lwork);
            }

            public static int Sggbak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* lscale, float* rscale, int m, float* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.Sggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int Dggbak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* lscale, double* rscale, int m, double* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.Dggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int Cggbak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* lscale, float* rscale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.Cggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int Zggbak(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* lscale, double* rscale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.Zggbak(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int SggbakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* lscale, float* rscale, int m, float* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.SggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int DggbakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* lscale, double* rscale, int m, double* v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.DggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int CggbakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, float* lscale, float* rscale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.CggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int ZggbakWork(MatrixLayout matrixLayout, sbyte job, sbyte side, int n, int ilo, int ihi, double* lscale, double* rscale, int m, System.IntPtr v, int ldV)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);

                return OpenBLAS.LAPACKE.ZggbakWork(matrixLayout, job, side, n, ilo, ihi, lscale, rscale, m, v, ldV);
            }

            public static int Sggbal(MatrixLayout matrixLayout, sbyte job, int n, float* a, int ldA, float* b, int ldB, int* ilo, int* ihi, float* lscale, float* rscale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);

                return OpenBLAS.LAPACKE.Sggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);
            }

            public static int Dggbal(MatrixLayout matrixLayout, sbyte job, int n, double* a, int ldA, double* b, int ldB, int* ilo, int* ihi, double* lscale, double* rscale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);

                return OpenBLAS.LAPACKE.Dggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);
            }

            public static int Cggbal(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* ilo, int* ihi, float* lscale, float* rscale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);

                return OpenBLAS.LAPACKE.Cggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);
            }

            public static int Zggbal(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* ilo, int* ihi, double* lscale, double* rscale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);

                return OpenBLAS.LAPACKE.Zggbal(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale);
            }

            public static int SggbalWork(MatrixLayout matrixLayout, sbyte job, int n, float* a, int ldA, float* b, int ldB, int* ilo, int* ihi, float* lscale, float* rscale, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);

                return OpenBLAS.LAPACKE.SggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);
            }

            public static int DggbalWork(MatrixLayout matrixLayout, sbyte job, int n, double* a, int ldA, double* b, int ldB, int* ilo, int* ihi, double* lscale, double* rscale, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);

                return OpenBLAS.LAPACKE.DggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);
            }

            public static int CggbalWork(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* ilo, int* ihi, float* lscale, float* rscale, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);

                return OpenBLAS.LAPACKE.CggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);
            }

            public static int ZggbalWork(MatrixLayout matrixLayout, sbyte job, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* ilo, int* ihi, double* lscale, double* rscale, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);

                return OpenBLAS.LAPACKE.ZggbalWork(matrixLayout, job, n, a, ldA, b, ldB, ilo, ihi, lscale, rscale, work);
            }

            public static int Sgges(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Sgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Dgges(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Dgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Cgges(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Cgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Zgges(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Zgges(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Sgges3(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Sgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Dgges3(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Dgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Cgges3(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Cgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Zgges3(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);

                return OpenBLAS.LAPACKE.Zgges3(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr);
            }

            public static int Sgges3Work(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr, float* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);

                return OpenBLAS.LAPACKE.Sgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);
            }

            public static int Dgges3Work(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr, double* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);

                return OpenBLAS.LAPACKE.Dgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);
            }

            public static int Cgges3Work(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, System.IntPtr work, int lwork, float* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.Cgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);
            }

            public static int Zgges3Work(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, System.IntPtr work, int lwork, double* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.Zgges3Work(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);
            }

            public static int SggesWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr, float* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);

                return OpenBLAS.LAPACKE.SggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);
            }

            public static int DggesWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr, double* work, int lwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);

                return OpenBLAS.LAPACKE.DggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, bwork);
            }

            public static int CggesWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, System.IntPtr work, int lwork, float* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.CggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);
            }

            public static int ZggesWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, System.IntPtr work, int lwork, double* rwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);

                return OpenBLAS.LAPACKE.ZggesWork(matrixLayout, jobvsl, jobvsr, sort, selctg, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, work, lwork, rwork, bwork);
            }

            public static int Sggesx(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);

                return OpenBLAS.LAPACKE.Sggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);
            }

            public static int Dggesx(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);

                return OpenBLAS.LAPACKE.Dggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);
            }

            public static int Cggesx(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);

                return OpenBLAS.LAPACKE.Cggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);
            }

            public static int Zggesx(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);

                return OpenBLAS.LAPACKE.Zggesx(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv);
            }

            public static int SggesxWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, float* a, int ldA, float* b, int ldB, int* sdim, float* alphar, float* alphai, float* beta, float* vsl, int ldvsl, float* vsr, int ldvsr, float* rconde, float* rcondv, float* work, int lwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.SggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork);
            }

            public static int DggesxWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, double* a, int ldA, double* b, int ldB, int* sdim, double* alphar, double* alphai, double* beta, double* vsl, int ldvsl, double* vsr, int ldvsr, double* rconde, double* rcondv, double* work, int lwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.DggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alphar, alphai, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, iwork, liwork, bwork);
            }

            public static int CggesxWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, float* rconde, float* rcondv, System.IntPtr work, int lwork, float* rwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.CggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork);
            }

            public static int ZggesxWork(MatrixLayout matrixLayout, sbyte jobvsl, sbyte jobvsr, sbyte sort, System.IntPtr selctg, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, int* sdim, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vsl, int ldvsl, System.IntPtr vsr, int ldvsr, double* rconde, double* rcondv, System.IntPtr work, int lwork, double* rwork, int* iwork, int liwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork);

                return OpenBLAS.LAPACKE.ZggesxWork(matrixLayout, jobvsl, jobvsr, sort, selctg, sense, n, a, ldA, b, ldB, sdim, alpha, beta, vsl, ldvsl, vsr, ldvsr, rconde, rcondv, work, lwork, rwork, iwork, liwork, bwork);
            }

            public static int Sggev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Sggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);
            }

            public static int Dggev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Dggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);
            }

            public static int Cggev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Cggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);
            }

            public static int Zggev(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Zggev(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);
            }

            public static int Sggev3(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Sggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);
            }

            public static int Dggev3(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Dggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr);
            }

            public static int Cggev3(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Cggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);
            }

            public static int Zggev3(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);

                return OpenBLAS.LAPACKE.Zggev3(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr);
            }

            public static int Sggev3Work(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.Sggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int Dggev3Work(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.Dggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int Cggev3Work(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Cggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int Zggev3Work(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Zggev3Work(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int SggevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.SggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int DggevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);

                return OpenBLAS.LAPACKE.DggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, work, lwork);
            }

            public static int CggevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int ZggevWork(MatrixLayout matrixLayout, sbyte jobvl, sbyte jobvr, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZggevWork(matrixLayout, jobvl, jobvr, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, work, lwork, rwork);
            }

            public static int Sggevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr, int* ilo, int* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Sggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);
            }

            public static int Dggevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr, int* ilo, int* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Dggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);
            }

            public static int Cggevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Cggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);
            }

            public static int Zggevx(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);

                return OpenBLAS.LAPACKE.Zggevx(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv);
            }

            public static int SggevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* vl, int ldvl, float* vr, int ldvr, int* ilo, int* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, float* work, int lwork, int* iwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork);

                return OpenBLAS.LAPACKE.SggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork);
            }

            public static int DggevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* vl, int ldvl, double* vr, int ldvr, int* ilo, int* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, double* work, int lwork, int* iwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork);

                return OpenBLAS.LAPACKE.DggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alphar, alphai, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, iwork, bwork);
            }

            public static int CggevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, float* lscale, float* rscale, float* abnrm, float* bbnrm, float* rconde, float* rcondv, System.IntPtr work, int lwork, float* rwork, int* iwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork);

                return OpenBLAS.LAPACKE.CggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork);
            }

            public static int ZggevxWork(MatrixLayout matrixLayout, sbyte balanc, sbyte jobvl, sbyte jobvr, sbyte sense, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int* ilo, int* ihi, double* lscale, double* rscale, double* abnrm, double* bbnrm, double* rconde, double* rcondv, System.IntPtr work, int lwork, double* rwork, int* iwork, int* bwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork);

                return OpenBLAS.LAPACKE.ZggevxWork(matrixLayout, balanc, jobvl, jobvr, sense, n, a, ldA, b, ldB, alpha, beta, vl, ldvl, vr, ldvr, ilo, ihi, lscale, rscale, abnrm, bbnrm, rconde, rcondv, work, lwork, rwork, iwork, bwork);
            }

            public static int Sggglm(MatrixLayout matrixLayout, int n, int m, int p, float* a, int ldA, float* b, int ldB, float* d, float* x, float* y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);

                return OpenBLAS.LAPACKE.Sggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);
            }

            public static int Dggglm(MatrixLayout matrixLayout, int n, int m, int p, double* a, int ldA, double* b, int ldB, double* d, double* x, double* y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);

                return OpenBLAS.LAPACKE.Dggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);
            }

            public static int Cggglm(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr d, System.IntPtr x, System.IntPtr y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);

                return OpenBLAS.LAPACKE.Cggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);
            }

            public static int Zggglm(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr d, System.IntPtr x, System.IntPtr y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);

                return OpenBLAS.LAPACKE.Zggglm(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y);
            }

            public static int SggglmWork(MatrixLayout matrixLayout, int n, int m, int p, float* a, int ldA, float* b, int ldB, float* d, float* x, float* y, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);

                return OpenBLAS.LAPACKE.SggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);
            }

            public static int DggglmWork(MatrixLayout matrixLayout, int n, int m, int p, double* a, int ldA, double* b, int ldB, double* d, double* x, double* y, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);

                return OpenBLAS.LAPACKE.DggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);
            }

            public static int CggglmWork(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr d, System.IntPtr x, System.IntPtr y, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);

                return OpenBLAS.LAPACKE.CggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);
            }

            public static int ZggglmWork(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr d, System.IntPtr x, System.IntPtr y, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);

                return OpenBLAS.LAPACKE.ZggglmWork(matrixLayout, n, m, p, a, ldA, b, ldB, d, x, y, work, lwork);
            }

            public static int Sgghd3(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Sgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Dgghd3(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Dgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Cgghd3(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Cgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Zgghd3(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Zgghd3(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Sgghd3Work(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Sgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);
            }

            public static int Dgghd3Work(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Dgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);
            }

            public static int Cgghd3Work(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Cgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);
            }

            public static int Zgghd3Work(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Zgghd3Work(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ, work, lwork);
            }

            public static int Sgghrd(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Sgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Dgghrd(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Dgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Cgghrd(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Cgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Zgghrd(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Zgghrd(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int SgghrdWork(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.SgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int DgghrdWork(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.DgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int CgghrdWork(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.CgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int ZgghrdWork(MatrixLayout matrixLayout, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.ZgghrdWork(matrixLayout, compq, compz, n, ilo, ihi, a, ldA, b, ldB, q, ldQ, z, ldZ);
            }

            public static int Sgglse(MatrixLayout matrixLayout, int m, int n, int p, float* a, int ldA, float* b, int ldB, float* c, float* d, float* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);

                return OpenBLAS.LAPACKE.Sgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);
            }

            public static int Dgglse(MatrixLayout matrixLayout, int m, int n, int p, double* a, int ldA, double* b, int ldB, double* c, double* d, double* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);

                return OpenBLAS.LAPACKE.Dgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);
            }

            public static int Cgglse(MatrixLayout matrixLayout, int m, int n, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, System.IntPtr d, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);

                return OpenBLAS.LAPACKE.Cgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);
            }

            public static int Zgglse(MatrixLayout matrixLayout, int m, int n, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, System.IntPtr d, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);

                return OpenBLAS.LAPACKE.Zgglse(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x);
            }

            public static int SgglseWork(MatrixLayout matrixLayout, int m, int n, int p, float* a, int ldA, float* b, int ldB, float* c, float* d, float* x, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);

                return OpenBLAS.LAPACKE.SgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);
            }

            public static int DgglseWork(MatrixLayout matrixLayout, int m, int n, int p, double* a, int ldA, double* b, int ldB, double* c, double* d, double* x, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);

                return OpenBLAS.LAPACKE.DgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);
            }

            public static int CgglseWork(MatrixLayout matrixLayout, int m, int n, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, System.IntPtr d, System.IntPtr x, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);

                return OpenBLAS.LAPACKE.CgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);
            }

            public static int ZgglseWork(MatrixLayout matrixLayout, int m, int n, int p, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, System.IntPtr d, System.IntPtr x, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);

                return OpenBLAS.LAPACKE.ZgglseWork(matrixLayout, m, n, p, a, ldA, b, ldB, c, d, x, work, lwork);
            }

            public static int Sggqrf(MatrixLayout matrixLayout, int n, int m, int p, float* a, int ldA, float* taua, float* b, int ldB, float* taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Sggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);
            }

            public static int Dggqrf(MatrixLayout matrixLayout, int n, int m, int p, double* a, int ldA, double* taua, double* b, int ldB, double* taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Dggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);
            }

            public static int Cggqrf(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Cggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);
            }

            public static int Zggqrf(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Zggqrf(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub);
            }

            public static int SggqrfWork(MatrixLayout matrixLayout, int n, int m, int p, float* a, int ldA, float* taua, float* b, int ldB, float* taub, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.SggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int DggqrfWork(MatrixLayout matrixLayout, int n, int m, int p, double* a, int ldA, double* taua, double* b, int ldB, double* taub, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.DggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int CggqrfWork(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.CggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int ZggqrfWork(MatrixLayout matrixLayout, int n, int m, int p, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.ZggqrfWork(matrixLayout, n, m, p, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int Sggrqf(MatrixLayout matrixLayout, int m, int p, int n, float* a, int ldA, float* taua, float* b, int ldB, float* taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Sggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);
            }

            public static int Dggrqf(MatrixLayout matrixLayout, int m, int p, int n, double* a, int ldA, double* taua, double* b, int ldB, double* taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Dggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);
            }

            public static int Cggrqf(MatrixLayout matrixLayout, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Cggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);
            }

            public static int Zggrqf(MatrixLayout matrixLayout, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);

                return OpenBLAS.LAPACKE.Zggrqf(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub);
            }

            public static int SggrqfWork(MatrixLayout matrixLayout, int m, int p, int n, float* a, int ldA, float* taua, float* b, int ldB, float* taub, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.SggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int DggrqfWork(MatrixLayout matrixLayout, int m, int p, int n, double* a, int ldA, double* taua, double* b, int ldB, double* taub, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.DggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int CggrqfWork(MatrixLayout matrixLayout, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.CggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int ZggrqfWork(MatrixLayout matrixLayout, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr taua, System.IntPtr b, int ldB, System.IntPtr taub, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);

                return OpenBLAS.LAPACKE.ZggrqfWork(matrixLayout, m, p, n, a, ldA, taua, b, ldB, taub, work, lwork);
            }

            public static int Sggsvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, float* a, int ldA, float* b, int ldB, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Sggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Dggsvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, double* a, int ldA, double* b, int ldB, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Dggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Cggsvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Cggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Zggsvd(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Zggsvd(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Sggsvd3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, float* a, int ldA, float* b, int ldB, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Sggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Dggsvd3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, double* a, int ldA, double* b, int ldB, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Dggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Cggsvd3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Cggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Zggsvd3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);

                return OpenBLAS.LAPACKE.Zggsvd3(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, iwork);
            }

            public static int Sggsvd3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, float* a, int ldA, float* b, int ldB, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, iwork);

                return OpenBLAS.LAPACKE.Sggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, iwork);
            }

            public static int Dggsvd3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, double* a, int ldA, double* b, int ldB, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, iwork);

                return OpenBLAS.LAPACKE.Dggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, iwork);
            }

            public static int Cggsvd3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, int lwork, float* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.Cggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, rwork, iwork);
            }

            public static int Zggsvd3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, int lwork, double* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, rwork, iwork);

                return OpenBLAS.LAPACKE.Zggsvd3Work(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, lwork, rwork, iwork);
            }

            public static int SggsvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, float* a, int ldA, float* b, int ldB, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, iwork);

                return OpenBLAS.LAPACKE.SggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, iwork);
            }

            public static int DggsvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, double* a, int ldA, double* b, int ldB, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, iwork);

                return OpenBLAS.LAPACKE.DggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, iwork);
            }

            public static int CggsvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, float* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, rwork, iwork);

                return OpenBLAS.LAPACKE.CggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, rwork, iwork);
            }

            public static int ZggsvdWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int n, int p, int* k, int* l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, double* rwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, rwork, iwork);

                return OpenBLAS.LAPACKE.ZggsvdWork(matrixLayout, jobu, jobv, jobq, m, n, p, k, l, a, ldA, b, ldB, alpha, beta, u, ldU, v, ldV, q, ldQ, work, rwork, iwork);
            }

            public static int Sggsvp(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, float* a, int ldA, float* b, int ldB, float tola, float tolb, int* k, int* l, float* u, int ldU, float* v, int ldV, float* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Sggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Dggsvp(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, double* a, int ldA, double* b, int ldB, double tola, double tolb, int* k, int* l, double* u, int ldU, double* v, int ldV, double* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Dggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Cggsvp(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Cggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Zggsvp(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Zggsvp(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Sggsvp3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, float* a, int ldA, float* b, int ldB, float tola, float tolb, int* k, int* l, float* u, int ldU, float* v, int ldV, float* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Sggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Dggsvp3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, double* a, int ldA, double* b, int ldB, double tola, double tolb, int* k, int* l, double* u, int ldU, double* v, int ldV, double* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Dggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Cggsvp3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Cggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Zggsvp3(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);

                return OpenBLAS.LAPACKE.Zggsvp3(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ);
            }

            public static int Sggsvp3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, float* a, int ldA, float* b, int ldB, float tola, float tolb, int* k, int* l, float* u, int ldU, float* v, int ldV, float* q, int ldQ, int* iwork, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work, lwork);

                return OpenBLAS.LAPACKE.Sggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work, lwork);
            }

            public static int Dggsvp3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, double* a, int ldA, double* b, int ldB, double tola, double tolb, int* k, int* l, double* u, int ldU, double* v, int ldV, double* q, int ldQ, int* iwork, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work, lwork);

                return OpenBLAS.LAPACKE.Dggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work, lwork);
            }

            public static int Cggsvp3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork, float* rwork, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work, lwork);

                return OpenBLAS.LAPACKE.Cggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work, lwork);
            }

            public static int Zggsvp3Work(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork, double* rwork, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work, lwork);

                return OpenBLAS.LAPACKE.Zggsvp3Work(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work, lwork);
            }

            public static int SggsvpWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, float* a, int ldA, float* b, int ldB, float tola, float tolb, int* k, int* l, float* u, int ldU, float* v, int ldV, float* q, int ldQ, int* iwork, float* tau, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work);

                return OpenBLAS.LAPACKE.SggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work);
            }

            public static int DggsvpWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, double* a, int ldA, double* b, int ldB, double tola, double tolb, int* k, int* l, double* u, int ldU, double* v, int ldV, double* q, int ldQ, int* iwork, double* tau, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work);

                return OpenBLAS.LAPACKE.DggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, tau, work);
            }

            public static int CggsvpWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork, float* rwork, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work);

                return OpenBLAS.LAPACKE.CggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work);
            }

            public static int ZggsvpWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, int* k, int* l, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* iwork, double* rwork, System.IntPtr tau, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work);

                return OpenBLAS.LAPACKE.ZggsvpWork(matrixLayout, jobu, jobv, jobq, m, p, n, a, ldA, b, ldB, tola, tolb, k, l, u, ldU, v, ldV, q, ldQ, iwork, rwork, tau, work);
            }

            public static int Sgtcon(sbyte norm, int n, float* dl, float* d, float* du, float* du2, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Sgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);
            }

            public static int Dgtcon(sbyte norm, int n, double* dl, double* d, double* du, double* du2, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Dgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);
            }

            public static int Cgtcon(sbyte norm, int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Cgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);
            }

            public static int Zgtcon(sbyte norm, int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zgtcon(norm, n, dl, d, du, du2, ipiv, anorm, rcond);
            }

            public static int SgtconWork(sbyte norm, int n, float* dl, float* d, float* du, float* du2, int* ipiv, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork);
            }

            public static int DgtconWork(sbyte norm, int n, double* dl, double* d, double* du, double* du2, int* ipiv, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work, iwork);
            }

            public static int CgtconWork(sbyte norm, int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.CgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work);
            }

            public static int ZgtconWork(sbyte norm, int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZgtconWork(norm, n, dl, d, du, du2, ipiv, anorm, rcond, work);
            }

            public static int Sgtrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Sgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dgtrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cgtrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zgtrfs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zgtrfs(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int SgtrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DgtrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CgtrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZgtrfsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgtrfsWork(matrixLayout, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sgtsv(MatrixLayout matrixLayout, int n, int nrhs, float* dl, float* d, float* du, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.Sgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int Dgtsv(MatrixLayout matrixLayout, int n, int nrhs, double* dl, double* d, double* du, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.Dgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int Cgtsv(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.Cgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int Zgtsv(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.Zgtsv(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int SgtsvWork(MatrixLayout matrixLayout, int n, int nrhs, float* dl, float* d, float* du, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.SgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int DgtsvWork(MatrixLayout matrixLayout, int n, int nrhs, double* dl, double* d, double* du, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.DgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int CgtsvWork(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.CgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int ZgtsvWork(MatrixLayout matrixLayout, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);

                return OpenBLAS.LAPACKE.ZgtsvWork(matrixLayout, n, nrhs, dl, d, du, b, ldB);
            }

            public static int Sgtsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Sgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dgtsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cgtsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zgtsvx(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zgtsvx(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SgtsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* dlf, float* df, float* duf, float* du2, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DgtsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* dlf, double* df, double* duf, double* du2, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CgtsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZgtsvxWork(MatrixLayout matrixLayout, sbyte fact, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr dlf, System.IntPtr df, System.IntPtr duf, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZgtsvxWork(matrixLayout, fact, trans, n, nrhs, dl, d, du, dlf, df, duf, du2, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Sgttrf(int n, float* dl, float* d, float* du, float* du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgttrf(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.Sgttrf(n, dl, d, du, du2, ipiv);
            }

            public static int Dgttrf(int n, double* dl, double* d, double* du, double* du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgttrf(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.Dgttrf(n, dl, d, du, du2, ipiv);
            }

            public static int Cgttrf(int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgttrf(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.Cgttrf(n, dl, d, du, du2, ipiv);
            }

            public static int Zgttrf(int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgttrf(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.Zgttrf(n, dl, d, du, du2, ipiv);
            }

            public static int SgttrfWork(int n, float* dl, float* d, float* du, float* du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgttrfWork(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.SgttrfWork(n, dl, d, du, du2, ipiv);
            }

            public static int DgttrfWork(int n, double* dl, double* d, double* du, double* du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgttrfWork(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.DgttrfWork(n, dl, d, du, du2, ipiv);
            }

            public static int CgttrfWork(int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgttrfWork(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.CgttrfWork(n, dl, d, du, du2, ipiv);
            }

            public static int ZgttrfWork(int n, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgttrfWork(n, dl, d, du, du2, ipiv);

                return OpenBLAS.LAPACKE.ZgttrfWork(n, dl, d, du, du2, ipiv);
            }

            public static int Sgttrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* du2, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int Dgttrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* du2, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int Cgttrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int Zgttrs(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zgttrs(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int SgttrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, float* dl, float* d, float* du, float* du2, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int DgttrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, double* dl, double* d, double* du, double* du2, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int CgttrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int ZgttrsWork(MatrixLayout matrixLayout, TransLapack trans, int n, int nrhs, System.IntPtr dl, System.IntPtr d, System.IntPtr du, System.IntPtr du2, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZgttrsWork(matrixLayout, trans, n, nrhs, dl, d, du, du2, ipiv, b, ldB);
            }

            public static int Chbev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Zhbev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Chbev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Zhbev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Chbev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Chbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork);
            }

            public static int Zhbev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Zhbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork);
            }

            public static int Chbevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Zhbevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Chbevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Zhbevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Chbevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Chbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int Zhbevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Zhbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChbevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ChbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZhbevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZhbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChbevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ChbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, rwork);
            }

            public static int ZhbevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ZhbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, rwork);
            }

            public static int Chbevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhbevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Chbevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhbevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Chbevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Chbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int Zhbevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Zhbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int ChbevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ChbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int ZhbevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZhbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int Chbgst(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr x, int ldX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);

                return OpenBLAS.LAPACKE.Chbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);
            }

            public static int Zhbgst(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr x, int ldX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);

                return OpenBLAS.LAPACKE.Zhbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);
            }

            public static int ChbgstWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr x, int ldX, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work, rwork);

                return OpenBLAS.LAPACKE.ChbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work, rwork);
            }

            public static int ZhbgstWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr x, int ldX, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work, rwork);

                return OpenBLAS.LAPACKE.ZhbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work, rwork);
            }

            public static int Chbgv(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Zhbgv(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Chbgvd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Zhbgvd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int ChbgvdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ChbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZhbgvdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZhbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChbgvWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ChbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, rwork);
            }

            public static int ZhbgvWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ZhbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, rwork);
            }

            public static int Chbgvx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhbgvx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int ChbgvxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ChbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int ZhbgvxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, System.IntPtr ab, int ldab, System.IntPtr bb, int ldbb, System.IntPtr q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZhbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int Chbtrd(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* d, float* e, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);

                return OpenBLAS.LAPACKE.Chbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);
            }

            public static int Zhbtrd(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* d, double* e, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);

                return OpenBLAS.LAPACKE.Zhbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);
            }

            public static int ChbtrdWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* d, float* e, System.IntPtr q, int ldQ, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);

                return OpenBLAS.LAPACKE.ChbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);
            }

            public static int ZhbtrdWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* d, double* e, System.IntPtr q, int ldQ, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);

                return OpenBLAS.LAPACKE.ZhbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);
            }

            public static int Checon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Checon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Checon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Zhecon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhecon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zhecon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Checon3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Checon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Checon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Zhecon3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhecon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zhecon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Checon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Checon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.Checon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);
            }

            public static int Zhecon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhecon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.Zhecon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);
            }

            public static int CheconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.CheconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);
            }

            public static int ZheconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZheconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);
            }

            public static int Cheequb(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Cheequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int Zheequb(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Zheequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int CheequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.CheequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int ZheequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.ZheequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int Cheev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheev(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Cheev(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Zheev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheev(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Zheev(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Cheev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Cheev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Zheev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Zheev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Cheev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Cheev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);
            }

            public static int Zheev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Zheev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);
            }

            public static int Cheevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevd(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Cheevd(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Zheevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevd(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Zheevd(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Cheevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Cheevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Zheevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Zheevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Cheevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Cheevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int Zheevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Zheevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int CheevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CheevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZheevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZheevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int Cheevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Cheevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Zheevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Zheevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Cheevr2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Cheevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Zheevr2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Zheevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Cheevr2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Cheevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int Zheevr2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Zheevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int CheevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CheevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZheevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZheevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int CheevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, float* w, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CheevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);
            }

            public static int ZheevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, double* w, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZheevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, rwork);
            }

            public static int Cheevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Cheevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zheevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zheevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Cheevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Cheevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zheevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zheevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Cheevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Cheevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int Zheevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Zheevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int CheevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.CheevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int ZheevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZheevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int Chegst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Chegst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int Zhegst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zhegst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int ChegstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChegstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ChegstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int ZhegstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhegstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ZhegstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int Chegv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Chegv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Zhegv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Zhegv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Chegv2stage(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Chegv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Zhegv2stage(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Zhegv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Chegv2stageWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Chegv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);
            }

            public static int Zhegv2stageWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.Zhegv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);
            }

            public static int Chegvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Chegvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Zhegvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Zhegvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int ChegvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChegvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ChegvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZhegvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhegvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZhegvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChegvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float* w, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChegvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ChegvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);
            }

            public static int ZhegvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double* w, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhegvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZhegvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, rwork);
            }

            public static int Chegvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chegvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chegvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhegvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhegvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhegvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int ChegvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChegvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ChegvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int ZhegvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhegvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZhegvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, rwork, iwork, ifail);
            }

            public static int Cherfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cherfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cherfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zherfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zherfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zherfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int CherfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CherfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CherfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZherfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZherfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZherfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Cherfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cherfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cherfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zherfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zherfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zherfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int CherfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CherfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CherfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZherfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZherfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZherfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Chesv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chesv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chesv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zhesv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhesv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhesv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ChesvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChesvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZhesvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhesvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ChesvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ChesvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZhesvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZhesvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ChesvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ChesvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int ZhesvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZhesvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int ChesvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ChesvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZhesvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZhesvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ChesvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChesvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int ZhesvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhesvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int ChesvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ChesvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int ZhesvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZhesvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int ChesvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ChesvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZhesvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZhesvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int Chesvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chesvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Chesvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zhesvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhesvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zhesvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int ChesvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ChesvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);
            }

            public static int ZhesvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZhesvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);
            }

            public static int Chesvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chesvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Chesvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zhesvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhesvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zhesvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int ChesvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChesvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ChesvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZhesvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhesvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZhesvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Cheswapr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cheswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Cheswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Zheswapr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zheswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Zheswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int CheswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CheswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.CheswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int ZheswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZheswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.ZheswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Chetrd(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* d, float* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrd(matrixLayout, uplo, n, a, ldA, d, e, tau);

                return OpenBLAS.LAPACKE.Chetrd(matrixLayout, uplo, n, a, ldA, d, e, tau);
            }

            public static int Zhetrd(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* d, double* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrd(matrixLayout, uplo, n, a, ldA, d, e, tau);

                return OpenBLAS.LAPACKE.Zhetrd(matrixLayout, uplo, n, a, ldA, d, e, tau);
            }

            public static int ChetrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* d, float* e, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);

                return OpenBLAS.LAPACKE.ChetrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);
            }

            public static int ZhetrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* d, double* e, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);
            }

            public static int Chetrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Chetrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zhetrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zhetrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ChetrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ChetrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ZhetrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ZhetrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ChetrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.ChetrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int ZhetrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.ZhetrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int ChetrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.ChetrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int ZhetrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int ChetrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ChetrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZhetrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ChetrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.ChetrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int ZhetrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.ZhetrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int ChetrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ChetrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int ZhetrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int ChetrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ChetrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ZhetrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ZhetrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ChetrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ChetrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZhetrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ChetrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ChetrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZhetrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Chetri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Chetri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zhetri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zhetri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Chetri2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Chetri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zhetri2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zhetri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Chetri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Chetri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Zhetri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Zhetri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Chetri2x(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Chetri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Zhetri2x(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Zhetri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Chetri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Chetri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Zhetri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Zhetri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Chetri3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Chetri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Zhetri3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Zhetri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Chetri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Chetri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int Zhetri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Zhetri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int ChetriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.ChetriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int ZhetriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.ZhetriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int Chetrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chetrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zhetrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhetrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Chetrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chetrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zhetrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhetrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Chetrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Chetrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Zhetrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Zhetrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Chetrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chetrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Zhetrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhetrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Chetrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chetrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chetrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Zhetrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhetrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhetrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int ChetrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZhetrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ChetrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZhetrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ChetrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZhetrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ChetrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ChetrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZhetrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZhetrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ChetrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZhetrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ChetrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZhetrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ChetrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChetrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChetrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZhetrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhetrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhetrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Chfrk(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, float alpha, System.IntPtr a, int ldA, float beta, System.IntPtr c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.Chfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int Zhfrk(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, double alpha, System.IntPtr a, int ldA, double beta, System.IntPtr c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.Zhfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int ChfrkWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, float alpha, System.IntPtr a, int ldA, float beta, System.IntPtr c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.ChfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int ZhfrkWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, double alpha, System.IntPtr a, int ldA, double beta, System.IntPtr c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.ZhfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int Shgeqz(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* h, int ldH, float* t, int ldT, float* alphar, float* alphai, float* beta, float* q, int ldQ, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Shgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Shgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ);
            }

            public static int Dhgeqz(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* h, int ldH, double* t, int ldT, double* alphar, double* alphai, double* beta, double* q, int ldQ, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dhgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Dhgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ);
            }

            public static int Chgeqz(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr t, int ldT, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Chgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ);
            }

            public static int Zhgeqz(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr t, int ldT, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ);

                return OpenBLAS.LAPACKE.Zhgeqz(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ);
            }

            public static int ShgeqzWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, float* h, int ldH, float* t, int ldT, float* alphar, float* alphai, float* beta, float* q, int ldQ, float* z, int ldZ, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ShgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.ShgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ, work, lwork);
            }

            public static int DhgeqzWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, double* h, int ldH, double* t, int ldT, double* alphar, double* alphai, double* beta, double* q, int ldQ, double* z, int ldZ, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DhgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.DhgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alphar, alphai, beta, q, ldQ, z, ldZ, work, lwork);
            }

            public static int ChgeqzWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr t, int ldT, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ChgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ, work, lwork, rwork);
            }

            public static int ZhgeqzWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr t, int ldT, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZhgeqzWork(matrixLayout, job, compq, compz, n, ilo, ihi, h, ldH, t, ldT, alpha, beta, q, ldQ, z, ldZ, work, lwork, rwork);
            }

            public static int Chpcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Chpcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int Zhpcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zhpcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int ChpconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ChpconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);
            }

            public static int ZhpconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZhpconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);
            }

            public static int Chpev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chpev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Zhpev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhpev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Chpevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chpevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Zhpevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhpevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int ChpevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ChpevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZhpevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZhpevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChpevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ChpevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, rwork);
            }

            public static int ZhpevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ZhpevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, rwork);
            }

            public static int Chpevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chpevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhpevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhpevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int ChpevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ChpevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int ZhpevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZhpevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int Chpgst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpgst(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.Chpgst(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int Zhpgst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpgst(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.Zhpgst(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int ChpgstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpgstWork(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.ChpgstWork(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int ZhpgstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpgstWork(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.ZhpgstWork(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int Chpgv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chpgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Zhpgv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhpgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Chpgvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chpgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Zhpgvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double* w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhpgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int ChpgvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ChpgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZhpgvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double* w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZhpgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ChpgvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ChpgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, rwork);
            }

            public static int ZhpgvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, rwork);

                return OpenBLAS.LAPACKE.ZhpgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, rwork);
            }

            public static int Chpgvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Chpgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Zhpgvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Zhpgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int ChpgvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, System.IntPtr work, float* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ChpgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int ZhpgvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, System.IntPtr ap, System.IntPtr bp, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, System.IntPtr work, double* rwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);

                return OpenBLAS.LAPACKE.ZhpgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, rwork, iwork, ifail);
            }

            public static int Chprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Chprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zhprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zhprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int ChprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ChprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZhprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZhprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Chpsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chpsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Zhpsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhpsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ChpsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChpsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ZhpsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhpsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Chpsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chpsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Chpsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zhpsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhpsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zhpsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int ChpsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChpsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ChpsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZhpsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhpsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZhpsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Chptrd(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float* d, float* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chptrd(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.Chptrd(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int Zhptrd(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double* d, double* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhptrd(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.Zhptrd(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int ChptrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float* d, float* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChptrdWork(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.ChptrdWork(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int ZhptrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double* d, double* e, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhptrdWork(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.ZhptrdWork(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int Chptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Chptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Zhptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Zhptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int ChptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.ChptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int ZhptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.ZhptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Chptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Chptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Zhptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Zhptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int ChptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.ChptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int ZhptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.ZhptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int Chptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Chptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Zhptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zhptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ChptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ChptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ZhptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZhptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Shsein(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, float* h, int ldH, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Shsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);

                return OpenBLAS.LAPACKE.Shsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);
            }

            public static int Dhsein(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, double* h, int ldH, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dhsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);

                return OpenBLAS.LAPACKE.Dhsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);
            }

            public static int Chsein(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);

                return OpenBLAS.LAPACKE.Chsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);
            }

            public static int Zhsein(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);

                return OpenBLAS.LAPACKE.Zhsein(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, ifaill, ifailr);
            }

            public static int ShseinWork(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, float* h, int ldH, float* wr, float* wi, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m, float* work, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ShseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr);

                return OpenBLAS.LAPACKE.ShseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr);
            }

            public static int DhseinWork(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, double* h, int ldH, double* wr, double* wi, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m, double* work, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DhseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr);

                return OpenBLAS.LAPACKE.DhseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, wr, wi, vl, ldvl, vr, ldvr, mm, m, work, ifaill, ifailr);
            }

            public static int ChseinWork(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, float* rwork, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr);

                return OpenBLAS.LAPACKE.ChseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr);
            }

            public static int ZhseinWork(MatrixLayout matrixLayout, sbyte job, sbyte eigsrc, sbyte initv, int* select, int n, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, double* rwork, int* ifaill, int* ifailr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr);

                return OpenBLAS.LAPACKE.ZhseinWork(matrixLayout, job, eigsrc, initv, select, n, h, ldH, w, vl, ldvl, vr, ldvr, mm, m, work, rwork, ifaill, ifailr);
            }

            public static int Shseqr(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, float* h, int ldH, float* wr, float* wi, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Shseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ);

                return OpenBLAS.LAPACKE.Shseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ);
            }

            public static int Dhseqr(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, double* h, int ldH, double* wr, double* wi, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dhseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ);

                return OpenBLAS.LAPACKE.Dhseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ);
            }

            public static int Chseqr(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Chseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ);

                return OpenBLAS.LAPACKE.Chseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ);
            }

            public static int Zhseqr(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zhseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ);

                return OpenBLAS.LAPACKE.Zhseqr(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ);
            }

            public static int ShseqrWork(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, float* h, int ldH, float* wr, float* wi, float* z, int ldZ, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ShseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.ShseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ, work, lwork);
            }

            public static int DhseqrWork(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, double* h, int ldH, double* wr, double* wi, double* z, int ldZ, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DhseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.DhseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, wr, wi, z, ldZ, work, lwork);
            }

            public static int ChseqrWork(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ChseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.ChseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ, work, lwork);
            }

            public static int ZhseqrWork(MatrixLayout matrixLayout, sbyte job, sbyte compz, int n, int ilo, int ihi, System.IntPtr h, int ldH, System.IntPtr w, System.IntPtr z, int ldZ, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZhseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.ZhseqrWork(matrixLayout, job, compz, n, ilo, ihi, h, ldH, w, z, ldZ, work, lwork);
            }

            public static int Clacgv(int n, System.IntPtr x, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacgv(n, x, incX);

                return OpenBLAS.LAPACKE.Clacgv(n, x, incX);
            }

            public static int Zlacgv(int n, System.IntPtr x, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacgv(n, x, incX);

                return OpenBLAS.LAPACKE.Zlacgv(n, x, incX);
            }

            public static int ClacgvWork(int n, System.IntPtr x, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClacgvWork(n, x, incX);

                return OpenBLAS.LAPACKE.ClacgvWork(n, x, incX);
            }

            public static int ZlacgvWork(int n, System.IntPtr x, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlacgvWork(n, x, incX);

                return OpenBLAS.LAPACKE.ZlacgvWork(n, x, incX);
            }

            public static int Slacn2(int n, float* v, float* x, int* isgn, float* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slacn2(n, v, x, isgn, est, kase, isave);

                return OpenBLAS.LAPACKE.Slacn2(n, v, x, isgn, est, kase, isave);
            }

            public static int Dlacn2(int n, double* v, double* x, int* isgn, double* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlacn2(n, v, x, isgn, est, kase, isave);

                return OpenBLAS.LAPACKE.Dlacn2(n, v, x, isgn, est, kase, isave);
            }

            public static int Clacn2(int n, System.IntPtr v, System.IntPtr x, float* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacn2(n, v, x, est, kase, isave);

                return OpenBLAS.LAPACKE.Clacn2(n, v, x, est, kase, isave);
            }

            public static int Zlacn2(int n, System.IntPtr v, System.IntPtr x, double* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacn2(n, v, x, est, kase, isave);

                return OpenBLAS.LAPACKE.Zlacn2(n, v, x, est, kase, isave);
            }

            public static int Slacn2Work(int n, float* v, float* x, int* isgn, float* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slacn2Work(n, v, x, isgn, est, kase, isave);

                return OpenBLAS.LAPACKE.Slacn2Work(n, v, x, isgn, est, kase, isave);
            }

            public static int Dlacn2Work(int n, double* v, double* x, int* isgn, double* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlacn2Work(n, v, x, isgn, est, kase, isave);

                return OpenBLAS.LAPACKE.Dlacn2Work(n, v, x, isgn, est, kase, isave);
            }

            public static int Clacn2Work(int n, System.IntPtr v, System.IntPtr x, float* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacn2Work(n, v, x, est, kase, isave);

                return OpenBLAS.LAPACKE.Clacn2Work(n, v, x, est, kase, isave);
            }

            public static int Zlacn2Work(int n, System.IntPtr v, System.IntPtr x, double* est, int* kase, int* isave)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacn2Work(n, v, x, est, kase, isave);

                return OpenBLAS.LAPACKE.Zlacn2Work(n, v, x, est, kase, isave);
            }

            public static int Clacp2(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float* a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacp2(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Clacp2(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Zlacp2(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double* a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacp2(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zlacp2(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Clacp2Work(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float* a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacp2Work(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Clacp2Work(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Zlacp2Work(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double* a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacp2Work(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zlacp2Work(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Slacpy(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Slacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Dlacpy(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dlacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Clacpy(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Clacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Zlacpy(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zlacpy(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int SlacpyWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.SlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int DlacpyWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.DlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int ClacpyWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ClacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int ZlacpyWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ZlacpyWork(matrixLayout, uplo, m, n, a, ldA, b, ldB);
            }

            public static int Clacrm(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* b, int ldB, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clacrm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);

                return OpenBLAS.LAPACKE.Clacrm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);
            }

            public static int Zlacrm(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* b, int ldB, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlacrm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);

                return OpenBLAS.LAPACKE.Zlacrm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);
            }

            public static int ClacrmWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, float* b, int ldB, System.IntPtr c, int ldC, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClacrmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, rwork);

                return OpenBLAS.LAPACKE.ClacrmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, rwork);
            }

            public static int ZlacrmWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, double* b, int ldB, System.IntPtr c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlacrmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, work);

                return OpenBLAS.LAPACKE.ZlacrmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, work);
            }

            public static int Zlag2c(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr sa, int ldsa)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlag2c(matrixLayout, m, n, a, ldA, sa, ldsa);

                return OpenBLAS.LAPACKE.Zlag2c(matrixLayout, m, n, a, ldA, sa, ldsa);
            }

            public static int Zlag2cWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr sa, int ldsa)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlag2cWork(matrixLayout, m, n, a, ldA, sa, ldsa);

                return OpenBLAS.LAPACKE.Zlag2cWork(matrixLayout, m, n, a, ldA, sa, ldsa);
            }

            public static int Slag2d(MatrixLayout matrixLayout, int m, int n, float* sa, int ldsa, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slag2d(matrixLayout, m, n, sa, ldsa, a, ldA);

                return OpenBLAS.LAPACKE.Slag2d(matrixLayout, m, n, sa, ldsa, a, ldA);
            }

            public static int Slag2dWork(MatrixLayout matrixLayout, int m, int n, float* sa, int ldsa, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slag2dWork(matrixLayout, m, n, sa, ldsa, a, ldA);

                return OpenBLAS.LAPACKE.Slag2dWork(matrixLayout, m, n, sa, ldsa, a, ldA);
            }

            public static int Dlag2s(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, float* sa, int ldsa)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlag2s(matrixLayout, m, n, a, ldA, sa, ldsa);

                return OpenBLAS.LAPACKE.Dlag2s(matrixLayout, m, n, a, ldA, sa, ldsa);
            }

            public static int Dlag2sWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, float* sa, int ldsa)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlag2sWork(matrixLayout, m, n, a, ldA, sa, ldsa);

                return OpenBLAS.LAPACKE.Dlag2sWork(matrixLayout, m, n, a, ldA, sa, ldsa);
            }

            public static int Clag2z(MatrixLayout matrixLayout, int m, int n, System.IntPtr sa, int ldsa, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clag2z(matrixLayout, m, n, sa, ldsa, a, ldA);

                return OpenBLAS.LAPACKE.Clag2z(matrixLayout, m, n, sa, ldsa, a, ldA);
            }

            public static int Clag2zWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr sa, int ldsa, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clag2zWork(matrixLayout, m, n, sa, ldsa, a, ldA);

                return OpenBLAS.LAPACKE.Clag2zWork(matrixLayout, m, n, sa, ldsa, a, ldA);
            }

            public static int Slagge(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* d, float* a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Slagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);
            }

            public static int Dlagge(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* d, double* a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Dlagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);
            }

            public static int Clagge(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Clagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);
            }

            public static int Zlagge(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Zlagge(matrixLayout, m, n, kl, ku, d, a, ldA, iseed);
            }

            public static int SlaggeWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* d, float* a, int ldA, int* iseed, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.SlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);
            }

            public static int DlaggeWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* d, double* a, int ldA, int* iseed, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.DlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);
            }

            public static int ClaggeWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, float* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ClaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);
            }

            public static int ZlaggeWork(MatrixLayout matrixLayout, int m, int n, int kl, int ku, double* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ZlaggeWork(matrixLayout, m, n, kl, ku, d, a, ldA, iseed, work);
            }

            public static int Claghe(MatrixLayout matrixLayout, int n, int k, float* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Claghe(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Claghe(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int Zlaghe(MatrixLayout matrixLayout, int n, int k, double* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlaghe(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Zlaghe(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int ClagheWork(MatrixLayout matrixLayout, int n, int k, float* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClagheWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ClagheWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static int ZlagheWork(MatrixLayout matrixLayout, int n, int k, double* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlagheWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ZlagheWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static int Slagsy(MatrixLayout matrixLayout, int n, int k, float* d, float* a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slagsy(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Slagsy(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int Dlagsy(MatrixLayout matrixLayout, int n, int k, double* d, double* a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlagsy(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Dlagsy(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int Clagsy(MatrixLayout matrixLayout, int n, int k, float* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clagsy(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Clagsy(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int Zlagsy(MatrixLayout matrixLayout, int n, int k, double* d, System.IntPtr a, int ldA, int* iseed)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlagsy(matrixLayout, n, k, d, a, ldA, iseed);

                return OpenBLAS.LAPACKE.Zlagsy(matrixLayout, n, k, d, a, ldA, iseed);
            }

            public static int SlagsyWork(MatrixLayout matrixLayout, int n, int k, float* d, float* a, int ldA, int* iseed, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.SlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static int DlagsyWork(MatrixLayout matrixLayout, int n, int k, double* d, double* a, int ldA, int* iseed, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.DlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static int ClagsyWork(MatrixLayout matrixLayout, int n, int k, float* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ClagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static int ZlagsyWork(MatrixLayout matrixLayout, int n, int k, double* d, System.IntPtr a, int ldA, int* iseed, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);

                return OpenBLAS.LAPACKE.ZlagsyWork(matrixLayout, n, k, d, a, ldA, iseed, work);
            }

            public static float Slamch(sbyte cmach)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slamch(cmach);

                return OpenBLAS.LAPACKE.Slamch(cmach);
            }

            public static double Dlamch(sbyte cmach)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlamch(cmach);

                return OpenBLAS.LAPACKE.Dlamch(cmach);
            }

            public static float SlamchWork(sbyte cmach)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlamchWork(cmach);

                return OpenBLAS.LAPACKE.SlamchWork(cmach);
            }

            public static double DlamchWork(sbyte cmach)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlamchWork(cmach);

                return OpenBLAS.LAPACKE.DlamchWork(cmach);
            }

            public static float Slange(MatrixLayout matrixLayout, sbyte norm, int m, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slange(matrixLayout, norm, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Slange(matrixLayout, norm, m, n, a, ldA);
            }

            public static double Dlange(MatrixLayout matrixLayout, sbyte norm, int m, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlange(matrixLayout, norm, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Dlange(matrixLayout, norm, m, n, a, ldA);
            }

            public static float Clange(MatrixLayout matrixLayout, sbyte norm, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clange(matrixLayout, norm, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Clange(matrixLayout, norm, m, n, a, ldA);
            }

            public static double Zlange(MatrixLayout matrixLayout, sbyte norm, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlange(matrixLayout, norm, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlange(matrixLayout, norm, m, n, a, ldA);
            }

            public static float SlangeWork(MatrixLayout matrixLayout, sbyte norm, int m, int n, float* a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlangeWork(matrixLayout, norm, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.SlangeWork(matrixLayout, norm, m, n, a, ldA, work);
            }

            public static double DlangeWork(MatrixLayout matrixLayout, sbyte norm, int m, int n, double* a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlangeWork(matrixLayout, norm, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.DlangeWork(matrixLayout, norm, m, n, a, ldA, work);
            }

            public static float ClangeWork(MatrixLayout matrixLayout, sbyte norm, int m, int n, System.IntPtr a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClangeWork(matrixLayout, norm, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ClangeWork(matrixLayout, norm, m, n, a, ldA, work);
            }

            public static double ZlangeWork(MatrixLayout matrixLayout, sbyte norm, int m, int n, System.IntPtr a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlangeWork(matrixLayout, norm, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ZlangeWork(matrixLayout, norm, m, n, a, ldA, work);
            }

            public static float Clanhe(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clanhe(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Clanhe(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static double Zlanhe(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlanhe(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlanhe(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static float ClanheWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClanheWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ClanheWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static double ZlanheWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlanheWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ZlanheWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static float Slansy(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slansy(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Slansy(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static double Dlansy(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlansy(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dlansy(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static float Clansy(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clansy(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Clansy(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static double Zlansy(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlansy(matrixLayout, norm, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlansy(matrixLayout, norm, uplo, n, a, ldA);
            }

            public static float SlansyWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, float* a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.SlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static double DlansyWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, double* a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.DlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static float ClansyWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClansyWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ClansyWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static double ZlansyWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, int n, System.IntPtr a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ZlansyWork(matrixLayout, norm, uplo, n, a, ldA, work);
            }

            public static float Slantr(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Slantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);
            }

            public static double Dlantr(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Dlantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);
            }

            public static float Clantr(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Clantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);
            }

            public static double Zlantr(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlantr(matrixLayout, norm, uplo, diag, m, n, a, ldA);
            }

            public static float SlantrWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, float* a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.SlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);
            }

            public static double DlantrWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, double* a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.DlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);
            }

            public static float ClantrWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, System.IntPtr a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ClantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);
            }

            public static double ZlantrWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int m, int n, System.IntPtr a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);

                return OpenBLAS.LAPACKE.ZlantrWork(matrixLayout, norm, uplo, diag, m, n, a, ldA, work);
            }

            public static int Slapmr(MatrixLayout matrixLayout, int forwrd, int m, int n, float* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapmr(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Slapmr(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Dlapmr(MatrixLayout matrixLayout, int forwrd, int m, int n, double* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapmr(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Dlapmr(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Clapmr(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clapmr(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Clapmr(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Zlapmr(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlapmr(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Zlapmr(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int SlapmrWork(MatrixLayout matrixLayout, int forwrd, int m, int n, float* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.SlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int DlapmrWork(MatrixLayout matrixLayout, int forwrd, int m, int n, double* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.DlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int ClapmrWork(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.ClapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int ZlapmrWork(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.ZlapmrWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Slapmt(MatrixLayout matrixLayout, int forwrd, int m, int n, float* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapmt(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Slapmt(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Dlapmt(MatrixLayout matrixLayout, int forwrd, int m, int n, double* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapmt(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Dlapmt(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Clapmt(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clapmt(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Clapmt(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int Zlapmt(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlapmt(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.Zlapmt(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int SlapmtWork(MatrixLayout matrixLayout, int forwrd, int m, int n, float* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.SlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int DlapmtWork(MatrixLayout matrixLayout, int forwrd, int m, int n, double* x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.DlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int ClapmtWork(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.ClapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static int ZlapmtWork(MatrixLayout matrixLayout, int forwrd, int m, int n, System.IntPtr x, int ldX, int* k)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);

                return OpenBLAS.LAPACKE.ZlapmtWork(matrixLayout, forwrd, m, n, x, ldX, k);
            }

            public static float Slapy2(float x, float y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapy2(x, y);

                return OpenBLAS.LAPACKE.Slapy2(x, y);
            }

            public static double Dlapy2(double x, double y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapy2(x, y);

                return OpenBLAS.LAPACKE.Dlapy2(x, y);
            }

            public static float Slapy2Work(float x, float y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapy2Work(x, y);

                return OpenBLAS.LAPACKE.Slapy2Work(x, y);
            }

            public static double Dlapy2Work(double x, double y)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapy2Work(x, y);

                return OpenBLAS.LAPACKE.Dlapy2Work(x, y);
            }

            public static float Slapy3(float x, float y, float z)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapy3(x, y, z);

                return OpenBLAS.LAPACKE.Slapy3(x, y, z);
            }

            public static double Dlapy3(double x, double y, double z)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapy3(x, y, z);

                return OpenBLAS.LAPACKE.Dlapy3(x, y, z);
            }

            public static float Slapy3Work(float x, float y, float z)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slapy3Work(x, y, z);

                return OpenBLAS.LAPACKE.Slapy3Work(x, y, z);
            }

            public static double Dlapy3Work(double x, double y, double z)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlapy3Work(x, y, z);

                return OpenBLAS.LAPACKE.Dlapy3Work(x, y, z);
            }

            public static int Clarcm(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarcm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);

                return OpenBLAS.LAPACKE.Clarcm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);
            }

            public static int Zlarcm(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarcm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);

                return OpenBLAS.LAPACKE.Zlarcm(matrixLayout, m, n, a, ldA, b, ldB, c, ldC);
            }

            public static int ClarcmWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarcmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, rwork);

                return OpenBLAS.LAPACKE.ClarcmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, rwork);
            }

            public static int ZlarcmWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarcmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, work);

                return OpenBLAS.LAPACKE.ZlarcmWork(matrixLayout, m, n, a, ldA, b, ldB, c, ldC, work);
            }

            public static int Slarfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, float* v, int ldV, float* t, int ldT, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Slarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);
            }

            public static int Dlarfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, double* v, int ldV, double* t, int ldT, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Dlarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);
            }

            public static int Clarfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Clarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);
            }

            public static int Zlarfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);

                return OpenBLAS.LAPACKE.Zlarfb(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC);
            }

            public static int SlarfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, float* v, int ldV, float* t, int ldT, float* c, int ldC, float* work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);

                return OpenBLAS.LAPACKE.SlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);
            }

            public static int DlarfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, double* v, int ldV, double* t, int ldT, double* c, int ldC, double* work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);

                return OpenBLAS.LAPACKE.DlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);
            }

            public static int ClarfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC, System.IntPtr work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);

                return OpenBLAS.LAPACKE.ClarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);
            }

            public static int ZlarfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr c, int ldC, System.IntPtr work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);

                return OpenBLAS.LAPACKE.ZlarfbWork(matrixLayout, side, trans, direct, storev, m, n, k, v, ldV, t, ldT, c, ldC, work, ldwork);
            }

            public static int Slarfg(int n, float* alpha, float* x, int incX, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slarfg(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.Slarfg(n, alpha, x, incX, tau);
            }

            public static int Dlarfg(int n, double* alpha, double* x, int incX, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlarfg(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.Dlarfg(n, alpha, x, incX, tau);
            }

            public static int Clarfg(int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarfg(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.Clarfg(n, alpha, x, incX, tau);
            }

            public static int Zlarfg(int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarfg(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.Zlarfg(n, alpha, x, incX, tau);
            }

            public static int SlarfgWork(int n, float* alpha, float* x, int incX, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlarfgWork(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.SlarfgWork(n, alpha, x, incX, tau);
            }

            public static int DlarfgWork(int n, double* alpha, double* x, int incX, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlarfgWork(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.DlarfgWork(n, alpha, x, incX, tau);
            }

            public static int ClarfgWork(int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarfgWork(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.ClarfgWork(n, alpha, x, incX, tau);
            }

            public static int ZlarfgWork(int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarfgWork(n, alpha, x, incX, tau);

                return OpenBLAS.LAPACKE.ZlarfgWork(n, alpha, x, incX, tau);
            }

            public static int Slarft(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, float* v, int ldV, float* tau, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.Slarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int Dlarft(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, double* v, int ldV, double* tau, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.Dlarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int Clarft(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, System.IntPtr v, int ldV, System.IntPtr tau, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.Clarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int Zlarft(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, System.IntPtr v, int ldV, System.IntPtr tau, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.Zlarft(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int SlarftWork(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, float* v, int ldV, float* tau, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.SlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int DlarftWork(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, double* v, int ldV, double* tau, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.DlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int ClarftWork(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, System.IntPtr v, int ldV, System.IntPtr tau, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.ClarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int ZlarftWork(MatrixLayout matrixLayout, sbyte direct, sbyte storev, int n, int k, System.IntPtr v, int ldV, System.IntPtr tau, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);

                return OpenBLAS.LAPACKE.ZlarftWork(matrixLayout, direct, storev, n, k, v, ldV, tau, t, ldT);
            }

            public static int Slarfx(MatrixLayout matrixLayout, sbyte side, int m, int n, float* v, float tau, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.Slarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int Dlarfx(MatrixLayout matrixLayout, sbyte side, int m, int n, double* v, double tau, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.Dlarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int Clarfx(MatrixLayout matrixLayout, sbyte side, int m, int n, System.IntPtr v, ComplexFloat tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.Clarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int Zlarfx(MatrixLayout matrixLayout, sbyte side, int m, int n, System.IntPtr v, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.Zlarfx(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int SlarfxWork(MatrixLayout matrixLayout, sbyte side, int m, int n, float* v, float tau, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.SlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int DlarfxWork(MatrixLayout matrixLayout, sbyte side, int m, int n, double* v, double tau, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.DlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int ClarfxWork(MatrixLayout matrixLayout, sbyte side, int m, int n, System.IntPtr v, ComplexFloat tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.ClarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int ZlarfxWork(MatrixLayout matrixLayout, sbyte side, int m, int n, System.IntPtr v, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.ZlarfxWork(matrixLayout, side, m, n, v, tau, c, ldC, work);
            }

            public static int Slarnv(int idist, int* iseed, int n, float* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slarnv(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.Slarnv(idist, iseed, n, x);
            }

            public static int Dlarnv(int idist, int* iseed, int n, double* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlarnv(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.Dlarnv(idist, iseed, n, x);
            }

            public static int Clarnv(int idist, int* iseed, int n, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clarnv(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.Clarnv(idist, iseed, n, x);
            }

            public static int Zlarnv(int idist, int* iseed, int n, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlarnv(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.Zlarnv(idist, iseed, n, x);
            }

            public static int SlarnvWork(int idist, int* iseed, int n, float* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlarnvWork(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.SlarnvWork(idist, iseed, n, x);
            }

            public static int DlarnvWork(int idist, int* iseed, int n, double* x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlarnvWork(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.DlarnvWork(idist, iseed, n, x);
            }

            public static int ClarnvWork(int idist, int* iseed, int n, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClarnvWork(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.ClarnvWork(idist, iseed, n, x);
            }

            public static int ZlarnvWork(int idist, int* iseed, int n, System.IntPtr x)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlarnvWork(idist, iseed, n, x);

                return OpenBLAS.LAPACKE.ZlarnvWork(idist, iseed, n, x);
            }

            public static int Slartgp(float f, float g, float* cs, float* sn, float* r)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slartgp(f, g, cs, sn, r);

                return OpenBLAS.LAPACKE.Slartgp(f, g, cs, sn, r);
            }

            public static int Dlartgp(double f, double g, double* cs, double* sn, double* r)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlartgp(f, g, cs, sn, r);

                return OpenBLAS.LAPACKE.Dlartgp(f, g, cs, sn, r);
            }

            public static int SlartgpWork(float f, float g, float* cs, float* sn, float* r)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlartgpWork(f, g, cs, sn, r);

                return OpenBLAS.LAPACKE.SlartgpWork(f, g, cs, sn, r);
            }

            public static int DlartgpWork(double f, double g, double* cs, double* sn, double* r)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlartgpWork(f, g, cs, sn, r);

                return OpenBLAS.LAPACKE.DlartgpWork(f, g, cs, sn, r);
            }

            public static int Slartgs(float x, float y, float sigma, float* cs, float* sn)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slartgs(x, y, sigma, cs, sn);

                return OpenBLAS.LAPACKE.Slartgs(x, y, sigma, cs, sn);
            }

            public static int Dlartgs(double x, double y, double sigma, double* cs, double* sn)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlartgs(x, y, sigma, cs, sn);

                return OpenBLAS.LAPACKE.Dlartgs(x, y, sigma, cs, sn);
            }

            public static int SlartgsWork(float x, float y, float sigma, float* cs, float* sn)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlartgsWork(x, y, sigma, cs, sn);

                return OpenBLAS.LAPACKE.SlartgsWork(x, y, sigma, cs, sn);
            }

            public static int DlartgsWork(double x, double y, double sigma, double* cs, double* sn)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlartgsWork(x, y, sigma, cs, sn);

                return OpenBLAS.LAPACKE.DlartgsWork(x, y, sigma, cs, sn);
            }

            public static int Slascl(MatrixLayout matrixLayout, sbyte type, int kl, int ku, float cfrom, float cto, int m, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Slascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int Dlascl(MatrixLayout matrixLayout, sbyte type, int kl, int ku, double cfrom, double cto, int m, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Dlascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int Clascl(MatrixLayout matrixLayout, sbyte type, int kl, int ku, float cfrom, float cto, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Clascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int Zlascl(MatrixLayout matrixLayout, sbyte type, int kl, int ku, double cfrom, double cto, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlascl(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int SlasclWork(MatrixLayout matrixLayout, sbyte type, int kl, int ku, float cfrom, float cto, int m, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.SlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int DlasclWork(MatrixLayout matrixLayout, sbyte type, int kl, int ku, double cfrom, double cto, int m, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.DlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int ClasclWork(MatrixLayout matrixLayout, sbyte type, int kl, int ku, float cfrom, float cto, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.ClasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int ZlasclWork(MatrixLayout matrixLayout, sbyte type, int kl, int ku, double cfrom, double cto, int m, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);

                return OpenBLAS.LAPACKE.ZlasclWork(matrixLayout, type, kl, ku, cfrom, cto, m, n, a, ldA);
            }

            public static int Slaset(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float alpha, float beta, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.Slaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int Dlaset(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double alpha, double beta, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.Dlaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int Claset(MatrixLayout matrixLayout, UpLo uplo, int m, int n, ComplexFloat alpha, ComplexFloat beta, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Claset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.Claset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int Zlaset(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr alpha, System.IntPtr beta, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.Zlaset(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int SlasetWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, float alpha, float beta, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.SlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int DlasetWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, double alpha, double beta, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.DlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int ClasetWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, ComplexFloat alpha, ComplexFloat beta, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.ClasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int ZlasetWork(MatrixLayout matrixLayout, UpLo uplo, int m, int n, System.IntPtr alpha, System.IntPtr beta, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);

                return OpenBLAS.LAPACKE.ZlasetWork(matrixLayout, uplo, m, n, alpha, beta, a, ldA);
            }

            public static int Slasrt(sbyte id, int n, float* d)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slasrt(id, n, d);

                return OpenBLAS.LAPACKE.Slasrt(id, n, d);
            }

            public static int Dlasrt(sbyte id, int n, double* d)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlasrt(id, n, d);

                return OpenBLAS.LAPACKE.Dlasrt(id, n, d);
            }

            public static int SlasrtWork(sbyte id, int n, float* d)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlasrtWork(id, n, d);

                return OpenBLAS.LAPACKE.SlasrtWork(id, n, d);
            }

            public static int DlasrtWork(sbyte id, int n, double* d)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlasrtWork(id, n, d);

                return OpenBLAS.LAPACKE.DlasrtWork(id, n, d);
            }

            public static int Slaswp(MatrixLayout matrixLayout, int n, float* a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.Slaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int Dlaswp(MatrixLayout matrixLayout, int n, double* a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.Dlaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int Claswp(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Claswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.Claswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int Zlaswp(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.Zlaswp(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int SlaswpWork(MatrixLayout matrixLayout, int n, float* a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.SlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int DlaswpWork(MatrixLayout matrixLayout, int n, double* a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.DlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int ClaswpWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.ClaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int ZlaswpWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, int k1, int k2, int* ipiv, int incX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);

                return OpenBLAS.LAPACKE.ZlaswpWork(matrixLayout, n, a, ldA, k1, k2, ipiv, incX);
            }

            public static int Slatms(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, float* d, int mode, float cond, float dmax, int kl, int ku, sbyte pack, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);

                return OpenBLAS.LAPACKE.Slatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);
            }

            public static int Dlatms(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, double* d, int mode, double cond, double dmax, int kl, int ku, sbyte pack, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);

                return OpenBLAS.LAPACKE.Dlatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);
            }

            public static int Clatms(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, float* d, int mode, float cond, float dmax, int kl, int ku, sbyte pack, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);

                return OpenBLAS.LAPACKE.Clatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);
            }

            public static int Zlatms(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, double* d, int mode, double cond, double dmax, int kl, int ku, sbyte pack, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);

                return OpenBLAS.LAPACKE.Zlatms(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA);
            }

            public static int SlatmsWork(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, float* d, int mode, float cond, float dmax, int kl, int ku, sbyte pack, float* a, int ldA, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);

                return OpenBLAS.LAPACKE.SlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);
            }

            public static int DlatmsWork(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, double* d, int mode, double cond, double dmax, int kl, int ku, sbyte pack, double* a, int ldA, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);

                return OpenBLAS.LAPACKE.DlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);
            }

            public static int ClatmsWork(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, float* d, int mode, float cond, float dmax, int kl, int ku, sbyte pack, System.IntPtr a, int ldA, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);

                return OpenBLAS.LAPACKE.ClatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);
            }

            public static int ZlatmsWork(MatrixLayout matrixLayout, int m, int n, sbyte dist, int* iseed, sbyte sym, double* d, int mode, double cond, double dmax, int kl, int ku, sbyte pack, System.IntPtr a, int ldA, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);

                return OpenBLAS.LAPACKE.ZlatmsWork(matrixLayout, m, n, dist, iseed, sym, d, mode, cond, dmax, kl, ku, pack, a, ldA, work);
            }

            public static int Slauum(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Slauum(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Slauum(matrixLayout, uplo, n, a, ldA);
            }

            public static int Dlauum(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dlauum(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dlauum(matrixLayout, uplo, n, a, ldA);
            }

            public static int Clauum(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Clauum(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Clauum(matrixLayout, uplo, n, a, ldA);
            }

            public static int Zlauum(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zlauum(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zlauum(matrixLayout, uplo, n, a, ldA);
            }

            public static int SlauumWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SlauumWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.SlauumWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int DlauumWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DlauumWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.DlauumWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int ClauumWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ClauumWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.ClauumWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int ZlauumWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZlauumWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.ZlauumWork(matrixLayout, uplo, n, a, ldA);
            }

            public static void Ilaver(int* vers_major, int* vers_minor, int* vers_patch)
            {
                if (MKL.IsSupoprted)
                {
                    MKL.LAPACKE.Ilaver(vers_major, vers_minor, vers_patch);
                    return;
                }
                OpenBLAS.LAPACKE.Ilaver(vers_major, vers_minor, vers_patch);
            }

            public static int Sopgtr(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* tau, float* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sopgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);

                return OpenBLAS.LAPACKE.Sopgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);
            }

            public static int Dopgtr(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* tau, double* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dopgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);

                return OpenBLAS.LAPACKE.Dopgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);
            }

            public static int SopgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* tau, float* q, int ldQ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SopgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);

                return OpenBLAS.LAPACKE.SopgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);
            }

            public static int DopgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* tau, double* q, int ldQ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DopgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);

                return OpenBLAS.LAPACKE.DopgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);
            }

            public static int Sopmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, float* ap, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sopmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sopmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);
            }

            public static int Dopmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, double* ap, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dopmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dopmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);
            }

            public static int SopmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, float* ap, float* tau, float* c, int ldC, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SopmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.SopmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);
            }

            public static int DopmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, double* ap, double* tau, double* c, int ldC, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DopmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.DopmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);
            }

            public static int Sorbdb(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, float* x11, int ldx11, float* x12, int ldx12, float* x21, int ldx21, float* x22, int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);

                return OpenBLAS.LAPACKE.Sorbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);
            }

            public static int Dorbdb(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, double* x11, int ldx11, double* x12, int ldx12, double* x21, int ldx21, double* x22, int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);

                return OpenBLAS.LAPACKE.Dorbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);
            }

            public static int SorbdbWork(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, float* x11, int ldx11, float* x12, int ldx12, float* x21, int ldx21, float* x22, int ldx22, float* theta, float* phi, float* taup1, float* taup2, float* tauq1, float* tauq2, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);

                return OpenBLAS.LAPACKE.SorbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);
            }

            public static int DorbdbWork(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, double* x11, int ldx11, double* x12, int ldx12, double* x21, int ldx21, double* x22, int ldx22, double* theta, double* phi, double* taup1, double* taup2, double* tauq1, double* tauq2, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);

                return OpenBLAS.LAPACKE.DorbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);
            }

            public static int Sorcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, float* x11, int ldx11, float* x12, int ldx12, float* x21, int ldx21, float* x22, int ldx22, float* theta, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t, float* v2t, int ldv2t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);

                return OpenBLAS.LAPACKE.Sorcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);
            }

            public static int Dorcsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, double* x11, int ldx11, double* x12, int ldx12, double* x21, int ldx21, double* x22, int ldx22, double* theta, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t, double* v2t, int ldv2t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);

                return OpenBLAS.LAPACKE.Dorcsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);
            }

            public static int Sorcsd2by1(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, float* x11, int ldx11, float* x21, int ldx21, float* theta, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorcsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);

                return OpenBLAS.LAPACKE.Sorcsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);
            }

            public static int Dorcsd2by1(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, double* x11, int ldx11, double* x21, int ldx21, double* theta, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorcsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);

                return OpenBLAS.LAPACKE.Dorcsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);
            }

            public static int Sorcsd2by1Work(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, float* x11, int ldx11, float* x21, int ldx21, float* theta, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorcsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork);

                return OpenBLAS.LAPACKE.Sorcsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork);
            }

            public static int Dorcsd2by1Work(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, double* x11, int ldx11, double* x21, int ldx21, double* theta, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorcsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork);

                return OpenBLAS.LAPACKE.Dorcsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, iwork);
            }

            public static int SorcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, float* x11, int ldx11, float* x12, int ldx12, float* x21, int ldx21, float* x22, int ldx22, float* theta, float* u1, int ldu1, float* u2, int ldu2, float* v1t, int ldv1t, float* v2t, int ldv2t, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SorcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork);
            }

            public static int DorcsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, double* x11, int ldx11, double* x12, int ldx12, double* x21, int ldx21, double* x22, int ldx22, double* theta, double* u1, int ldu1, double* u2, int ldu2, double* v1t, int ldv1t, double* v2t, int ldv2t, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DorcsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, iwork);
            }

            public static int Sorgbr(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorgbr(matrixLayout, vect, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorgbr(matrixLayout, vect, m, n, k, a, ldA, tau);
            }

            public static int Dorgbr(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorgbr(matrixLayout, vect, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorgbr(matrixLayout, vect, m, n, k, a, ldA, tau);
            }

            public static int SorgbrWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorgbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorgbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int DorgbrWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorgbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorgbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Sorghr(MatrixLayout matrixLayout, int n, int ilo, int ihi, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorghr(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorghr(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int Dorghr(MatrixLayout matrixLayout, int n, int ilo, int ihi, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorghr(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorghr(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int SorghrWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int DorghrWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int Sorglq(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorglq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorglq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Dorglq(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorglq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorglq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int SorglqWork(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int DorglqWork(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Sorgql(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorgql(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorgql(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Dorgql(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorgql(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorgql(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int SorgqlWork(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorgqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorgqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int DorgqlWork(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorgqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorgqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Sorgqr(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorgqr(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorgqr(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Dorgqr(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorgqr(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorgqr(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int SorgqrWork(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorgqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorgqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int DorgqrWork(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorgqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorgqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Sorgrq(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorgrq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorgrq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Dorgrq(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorgrq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorgrq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int SorgrqWork(MatrixLayout matrixLayout, int m, int n, int k, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorgrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorgrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int DorgrqWork(MatrixLayout matrixLayout, int m, int n, int k, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorgrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorgrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Sorgtr(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sorgtr(matrixLayout, uplo, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Sorgtr(matrixLayout, uplo, n, a, ldA, tau);
            }

            public static int Dorgtr(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dorgtr(matrixLayout, uplo, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dorgtr(matrixLayout, uplo, n, a, ldA, tau);
            }

            public static int SorgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SorgtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.SorgtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);
            }

            public static int DorgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DorgtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DorgtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);
            }

            public static int Sormbr(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Dormbr(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int SormbrWork(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormbrWork(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormhr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);
            }

            public static int Dormhr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);
            }

            public static int SormhrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormhrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Dormlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int SormlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormql(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Dormql(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int SormqlWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormqlWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Dormqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int SormqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormrq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Dormrq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int SormrqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormrqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormrz(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);
            }

            public static int Dormrz(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);
            }

            public static int SormrzWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormrzWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Sormtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, float* a, int ldA, float* tau, float* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sormtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Sormtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);
            }

            public static int Dormtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, double* a, int ldA, double* tau, double* c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dormtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Dormtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);
            }

            public static int SormtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, float* a, int ldA, float* tau, float* c, int ldC, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SormtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.SormtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int DormtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, double* a, int ldA, double* tau, double* c, int ldC, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DormtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.DormtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Spbcon(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);

                return OpenBLAS.LAPACKE.Spbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);
            }

            public static int Dpbcon(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);

                return OpenBLAS.LAPACKE.Dpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);
            }

            public static int Cpbcon(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);

                return OpenBLAS.LAPACKE.Cpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);
            }

            public static int Zpbcon(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);

                return OpenBLAS.LAPACKE.Zpbcon(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond);
            }

            public static int SpbconWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, iwork);
            }

            public static int DpbconWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, iwork);
            }

            public static int CpbconWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float anorm, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, rwork);
            }

            public static int ZpbconWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double anorm, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZpbconWork(matrixLayout, uplo, n, kd, ab, ldab, anorm, rcond, work, rwork);
            }

            public static int Spbequ(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.Spbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int Dpbequ(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.Dpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int Cpbequ(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.Cpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int Zpbequ(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.Zpbequ(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int SpbequWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.SpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int DpbequWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.DpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int CpbequWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.CpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int ZpbequWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);

                return OpenBLAS.LAPACKE.ZpbequWork(matrixLayout, uplo, n, kd, ab, ldab, s, scond, amax);
            }

            public static int Spbrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* afb, int ldafb, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Spbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dpbrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* afb, int ldafb, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cpbrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zpbrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zpbrfs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr);
            }

            public static int SpbrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* afb, int ldafb, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DpbrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* afb, int ldafb, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CpbrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZpbrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZpbrfsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Spbstf(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, float* bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbstf(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.Spbstf(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int Dpbstf(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, double* bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbstf(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.Dpbstf(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int Cpbstf(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, System.IntPtr bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbstf(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.Cpbstf(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int Zpbstf(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, System.IntPtr bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbstf(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.Zpbstf(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int SpbstfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, float* bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.SpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int DpbstfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, double* bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.DpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int CpbstfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, System.IntPtr bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.CpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int ZpbstfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kb, System.IntPtr bb, int ldbb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);

                return OpenBLAS.LAPACKE.ZpbstfWork(matrixLayout, uplo, n, kb, bb, ldbb);
            }

            public static int Spbsv(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Spbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Dpbsv(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Dpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Cpbsv(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Cpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Zpbsv(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Zpbsv(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int SpbsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.SpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int DpbsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.DpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int CpbsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.CpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int ZpbsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.ZpbsvWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Spbsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* afb, int ldafb, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Spbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dpbsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* afb, int ldafb, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cpbsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zpbsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zpbsvx(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SpbsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* afb, int ldafb, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DpbsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* afb, int ldafb, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CpbsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZpbsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr afb, int ldafb, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZpbsvxWork(matrixLayout, fact, uplo, n, kd, nrhs, ab, ldab, afb, ldafb, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Spbtrf(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbtrf(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.Spbtrf(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int Dpbtrf(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbtrf(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.Dpbtrf(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int Cpbtrf(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbtrf(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.Cpbtrf(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int Zpbtrf(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbtrf(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.Zpbtrf(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int SpbtrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, float* ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.SpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int DpbtrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, double* ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.DpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int CpbtrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.CpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int ZpbtrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, System.IntPtr ab, int ldab)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);

                return OpenBLAS.LAPACKE.ZpbtrfWork(matrixLayout, uplo, n, kd, ab, ldab);
            }

            public static int Spbtrs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Spbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Dpbtrs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Dpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Cpbtrs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Cpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Zpbtrs(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Zpbtrs(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int SpbtrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.SpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int DpbtrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.DpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int CpbtrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.CpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int ZpbtrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.ZpbtrsWork(matrixLayout, uplo, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Spftrf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spftrf(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Spftrf(matrixLayout, transr, uplo, n, a);
            }

            public static int Dpftrf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpftrf(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Dpftrf(matrixLayout, transr, uplo, n, a);
            }

            public static int Cpftrf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpftrf(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Cpftrf(matrixLayout, transr, uplo, n, a);
            }

            public static int Zpftrf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpftrf(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Zpftrf(matrixLayout, transr, uplo, n, a);
            }

            public static int SpftrfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpftrfWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.SpftrfWork(matrixLayout, transr, uplo, n, a);
            }

            public static int DpftrfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpftrfWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.DpftrfWork(matrixLayout, transr, uplo, n, a);
            }

            public static int CpftrfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpftrfWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.CpftrfWork(matrixLayout, transr, uplo, n, a);
            }

            public static int ZpftrfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpftrfWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.ZpftrfWork(matrixLayout, transr, uplo, n, a);
            }

            public static int Spftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spftri(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Spftri(matrixLayout, transr, uplo, n, a);
            }

            public static int Dpftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpftri(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Dpftri(matrixLayout, transr, uplo, n, a);
            }

            public static int Cpftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpftri(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Cpftri(matrixLayout, transr, uplo, n, a);
            }

            public static int Zpftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpftri(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.Zpftri(matrixLayout, transr, uplo, n, a);
            }

            public static int SpftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpftriWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.SpftriWork(matrixLayout, transr, uplo, n, a);
            }

            public static int DpftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpftriWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.DpftriWork(matrixLayout, transr, uplo, n, a);
            }

            public static int CpftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpftriWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.CpftriWork(matrixLayout, transr, uplo, n, a);
            }

            public static int ZpftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpftriWork(matrixLayout, transr, uplo, n, a);

                return OpenBLAS.LAPACKE.ZpftriWork(matrixLayout, transr, uplo, n, a);
            }

            public static int Spftrs(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, float* a, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.Spftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int Dpftrs(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, double* a, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.Dpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int Cpftrs(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.Cpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int Zpftrs(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.Zpftrs(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int SpftrsWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, float* a, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.SpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int DpftrsWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, double* a, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.DpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int CpftrsWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.CpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int ZpftrsWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, int nrhs, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);

                return OpenBLAS.LAPACKE.ZpftrsWork(matrixLayout, transr, uplo, n, nrhs, a, b, ldB);
            }

            public static int Spocon(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Spocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);
            }

            public static int Dpocon(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Dpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);
            }

            public static int Cpocon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Cpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);
            }

            public static int Zpocon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);

                return OpenBLAS.LAPACKE.Zpocon(matrixLayout, uplo, n, a, ldA, anorm, rcond);
            }

            public static int SpoconWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, iwork);
            }

            public static int DpoconWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, iwork);
            }

            public static int CpoconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float anorm, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, rwork);
            }

            public static int ZpoconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double anorm, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZpoconWork(matrixLayout, uplo, n, a, ldA, anorm, rcond, work, rwork);
            }

            public static int Spoequ(MatrixLayout matrixLayout, int n, float* a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spoequ(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Spoequ(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Dpoequ(MatrixLayout matrixLayout, int n, double* a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpoequ(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Dpoequ(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Cpoequ(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpoequ(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Cpoequ(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Zpoequ(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpoequ(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Zpoequ(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Spoequb(MatrixLayout matrixLayout, int n, float* a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spoequb(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Spoequb(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Dpoequb(MatrixLayout matrixLayout, int n, double* a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpoequb(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Dpoequb(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Cpoequb(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpoequb(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Cpoequb(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Zpoequb(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpoequb(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Zpoequb(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int SpoequbWork(MatrixLayout matrixLayout, int n, float* a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.SpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int DpoequbWork(MatrixLayout matrixLayout, int n, double* a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.DpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int CpoequbWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.CpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int ZpoequbWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.ZpoequbWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int SpoequWork(MatrixLayout matrixLayout, int n, float* a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpoequWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.SpoequWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int DpoequWork(MatrixLayout matrixLayout, int n, double* a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpoequWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.DpoequWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int CpoequWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpoequWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.CpoequWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int ZpoequWork(MatrixLayout matrixLayout, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpoequWork(matrixLayout, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.ZpoequWork(matrixLayout, n, a, ldA, s, scond, amax);
            }

            public static int Sporfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Sporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dporfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cporfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zporfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zporfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr);
            }

            public static int SporfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DporfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CporfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZporfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZporfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sporfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dporfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cporfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zporfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zporfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SporfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DporfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CporfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZporfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZporfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Sposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Sposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Dposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Cposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Cposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Zposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int SposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.SposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int DposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.DposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int CposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.CposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int ZposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ZposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Sposvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Sposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dposvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cposvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zposvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zposvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SposvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DposvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CposvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZposvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZposvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Sposvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Sposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dposvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Cposvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Cposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zposvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zposvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SposvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DposvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CposvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZposvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZposvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Spotrf(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spotrf(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Spotrf(matrixLayout, uplo, n, a, ldA);
            }

            public static int Dpotrf(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpotrf(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dpotrf(matrixLayout, uplo, n, a, ldA);
            }

            public static int Cpotrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpotrf(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Cpotrf(matrixLayout, uplo, n, a, ldA);
            }

            public static int Zpotrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpotrf(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zpotrf(matrixLayout, uplo, n, a, ldA);
            }

            public static int Spotrf2(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spotrf2(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Spotrf2(matrixLayout, uplo, n, a, ldA);
            }

            public static int Dpotrf2(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpotrf2(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dpotrf2(matrixLayout, uplo, n, a, ldA);
            }

            public static int Cpotrf2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpotrf2(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Cpotrf2(matrixLayout, uplo, n, a, ldA);
            }

            public static int Zpotrf2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpotrf2(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zpotrf2(matrixLayout, uplo, n, a, ldA);
            }

            public static int Spotrf2Work(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spotrf2Work(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Spotrf2Work(matrixLayout, uplo, n, a, ldA);
            }

            public static int Dpotrf2Work(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpotrf2Work(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dpotrf2Work(matrixLayout, uplo, n, a, ldA);
            }

            public static int Cpotrf2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpotrf2Work(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Cpotrf2Work(matrixLayout, uplo, n, a, ldA);
            }

            public static int Zpotrf2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpotrf2Work(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zpotrf2Work(matrixLayout, uplo, n, a, ldA);
            }

            public static int SpotrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpotrfWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.SpotrfWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int DpotrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpotrfWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.DpotrfWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int CpotrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpotrfWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.CpotrfWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int ZpotrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpotrfWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.ZpotrfWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int Spotri(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spotri(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Spotri(matrixLayout, uplo, n, a, ldA);
            }

            public static int Dpotri(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpotri(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Dpotri(matrixLayout, uplo, n, a, ldA);
            }

            public static int Cpotri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpotri(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Cpotri(matrixLayout, uplo, n, a, ldA);
            }

            public static int Zpotri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpotri(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.Zpotri(matrixLayout, uplo, n, a, ldA);
            }

            public static int SpotriWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpotriWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.SpotriWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int DpotriWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpotriWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.DpotriWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int CpotriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpotriWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.CpotriWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int ZpotriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpotriWork(matrixLayout, uplo, n, a, ldA);

                return OpenBLAS.LAPACKE.ZpotriWork(matrixLayout, uplo, n, a, ldA);
            }

            public static int Spotrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Spotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Dpotrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Cpotrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Cpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Zpotrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Zpotrs(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int SpotrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.SpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int DpotrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.DpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int CpotrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.CpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int ZpotrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ZpotrsWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB);
            }

            public static int Sppcon(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sppcon(matrixLayout, uplo, n, ap, anorm, rcond);

                return OpenBLAS.LAPACKE.Sppcon(matrixLayout, uplo, n, ap, anorm, rcond);
            }

            public static int Dppcon(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dppcon(matrixLayout, uplo, n, ap, anorm, rcond);

                return OpenBLAS.LAPACKE.Dppcon(matrixLayout, uplo, n, ap, anorm, rcond);
            }

            public static int Cppcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cppcon(matrixLayout, uplo, n, ap, anorm, rcond);

                return OpenBLAS.LAPACKE.Cppcon(matrixLayout, uplo, n, ap, anorm, rcond);
            }

            public static int Zppcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zppcon(matrixLayout, uplo, n, ap, anorm, rcond);

                return OpenBLAS.LAPACKE.Zppcon(matrixLayout, uplo, n, ap, anorm, rcond);
            }

            public static int SppconWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, iwork);
            }

            public static int DppconWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, iwork);
            }

            public static int CppconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float anorm, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, rwork);
            }

            public static int ZppconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double anorm, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZppconWork(matrixLayout, uplo, n, ap, anorm, rcond, work, rwork);
            }

            public static int Sppequ(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sppequ(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.Sppequ(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int Dppequ(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dppequ(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.Dppequ(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int Cppequ(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cppequ(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.Cppequ(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int Zppequ(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zppequ(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.Zppequ(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int SppequWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SppequWork(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.SppequWork(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int DppequWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DppequWork(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.DppequWork(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int CppequWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CppequWork(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.CppequWork(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int ZppequWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZppequWork(matrixLayout, uplo, n, ap, s, scond, amax);

                return OpenBLAS.LAPACKE.ZppequWork(matrixLayout, uplo, n, ap, s, scond, amax);
            }

            public static int Spprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* afp, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Spprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dpprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* afp, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cpprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zpprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zpprfs(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr);
            }

            public static int SpprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* afp, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DpprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* afp, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CpprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZpprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZpprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sppsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Sppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Dppsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Dppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Cppsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Cppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Zppsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Zppsv(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int SppsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.SppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int DppsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.DppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int CppsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.CppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int ZppsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.ZppsvWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Sppsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* ap, float* afp, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Sppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dppsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* ap, double* afp, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cppsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zppsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zppsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SppsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* ap, float* afp, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DppsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* ap, double* afp, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CppsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZppsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZppsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, equed, s, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Spptrf(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spptrf(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Spptrf(matrixLayout, uplo, n, ap);
            }

            public static int Dpptrf(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpptrf(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Dpptrf(matrixLayout, uplo, n, ap);
            }

            public static int Cpptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpptrf(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Cpptrf(matrixLayout, uplo, n, ap);
            }

            public static int Zpptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpptrf(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Zpptrf(matrixLayout, uplo, n, ap);
            }

            public static int SpptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpptrfWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.SpptrfWork(matrixLayout, uplo, n, ap);
            }

            public static int DpptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpptrfWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.DpptrfWork(matrixLayout, uplo, n, ap);
            }

            public static int CpptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpptrfWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.CpptrfWork(matrixLayout, uplo, n, ap);
            }

            public static int ZpptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpptrfWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.ZpptrfWork(matrixLayout, uplo, n, ap);
            }

            public static int Spptri(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spptri(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Spptri(matrixLayout, uplo, n, ap);
            }

            public static int Dpptri(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpptri(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Dpptri(matrixLayout, uplo, n, ap);
            }

            public static int Cpptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpptri(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Cpptri(matrixLayout, uplo, n, ap);
            }

            public static int Zpptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpptri(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.Zpptri(matrixLayout, uplo, n, ap);
            }

            public static int SpptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpptriWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.SpptriWork(matrixLayout, uplo, n, ap);
            }

            public static int DpptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpptriWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.DpptriWork(matrixLayout, uplo, n, ap);
            }

            public static int CpptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpptriWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.CpptriWork(matrixLayout, uplo, n, ap);
            }

            public static int ZpptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpptriWork(matrixLayout, uplo, n, ap);

                return OpenBLAS.LAPACKE.ZpptriWork(matrixLayout, uplo, n, ap);
            }

            public static int Spptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Spptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Dpptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Dpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Cpptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Cpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Zpptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Zpptrs(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int SpptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.SpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int DpptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.DpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int CpptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.CpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int ZpptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.ZpptrsWork(matrixLayout, uplo, n, nrhs, ap, b, ldB);
            }

            public static int Spstrf(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* piv, int* rank, float tol)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);

                return OpenBLAS.LAPACKE.Spstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);
            }

            public static int Dpstrf(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* piv, int* rank, double tol)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);

                return OpenBLAS.LAPACKE.Dpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);
            }

            public static int Cpstrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* piv, int* rank, float tol)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);

                return OpenBLAS.LAPACKE.Cpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);
            }

            public static int Zpstrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* piv, int* rank, double tol)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);

                return OpenBLAS.LAPACKE.Zpstrf(matrixLayout, uplo, n, a, ldA, piv, rank, tol);
            }

            public static int SpstrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* piv, int* rank, float tol, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);

                return OpenBLAS.LAPACKE.SpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);
            }

            public static int DpstrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* piv, int* rank, double tol, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);

                return OpenBLAS.LAPACKE.DpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);
            }

            public static int CpstrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* piv, int* rank, float tol, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);

                return OpenBLAS.LAPACKE.CpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);
            }

            public static int ZpstrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* piv, int* rank, double tol, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);

                return OpenBLAS.LAPACKE.ZpstrfWork(matrixLayout, uplo, n, a, ldA, piv, rank, tol, work);
            }

            public static int Sptcon(int n, float* d, float* e, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sptcon(n, d, e, anorm, rcond);

                return OpenBLAS.LAPACKE.Sptcon(n, d, e, anorm, rcond);
            }

            public static int Dptcon(int n, double* d, double* e, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dptcon(n, d, e, anorm, rcond);

                return OpenBLAS.LAPACKE.Dptcon(n, d, e, anorm, rcond);
            }

            public static int Cptcon(int n, float* d, System.IntPtr e, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cptcon(n, d, e, anorm, rcond);

                return OpenBLAS.LAPACKE.Cptcon(n, d, e, anorm, rcond);
            }

            public static int Zptcon(int n, double* d, System.IntPtr e, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zptcon(n, d, e, anorm, rcond);

                return OpenBLAS.LAPACKE.Zptcon(n, d, e, anorm, rcond);
            }

            public static int SptconWork(int n, float* d, float* e, float anorm, float* rcond, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SptconWork(n, d, e, anorm, rcond, work);

                return OpenBLAS.LAPACKE.SptconWork(n, d, e, anorm, rcond, work);
            }

            public static int DptconWork(int n, double* d, double* e, double anorm, double* rcond, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DptconWork(n, d, e, anorm, rcond, work);

                return OpenBLAS.LAPACKE.DptconWork(n, d, e, anorm, rcond, work);
            }

            public static int CptconWork(int n, float* d, System.IntPtr e, float anorm, float* rcond, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CptconWork(n, d, e, anorm, rcond, work);

                return OpenBLAS.LAPACKE.CptconWork(n, d, e, anorm, rcond, work);
            }

            public static int ZptconWork(int n, double* d, System.IntPtr e, double anorm, double* rcond, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZptconWork(n, d, e, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZptconWork(n, d, e, anorm, rcond, work);
            }

            public static int Spteqr(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Spteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Dpteqr(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Dpteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Cpteqr(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Cpteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Zpteqr(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Zpteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int SpteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.SpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int DpteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.DpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int CpteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.CpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int ZpteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.ZpteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int Sptrfs(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* df, float* ef, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sptrfs(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Sptrfs(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dptrfs(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* df, double* ef, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dptrfs(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dptrfs(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);
            }

            public static int Cptrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* d, System.IntPtr e, float* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cptrfs(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Cptrfs(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zptrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* d, System.IntPtr e, double* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zptrfs(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zptrfs(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr);
            }

            public static int SptrfsWork(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* df, float* ef, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SptrfsWork(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work);

                return OpenBLAS.LAPACKE.SptrfsWork(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work);
            }

            public static int DptrfsWork(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* df, double* ef, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DptrfsWork(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work);

                return OpenBLAS.LAPACKE.DptrfsWork(matrixLayout, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work);
            }

            public static int CptrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* d, System.IntPtr e, float* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CptrfsWork(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CptrfsWork(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZptrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* d, System.IntPtr e, double* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZptrfsWork(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZptrfsWork(matrixLayout, uplo, n, nrhs, d, e, df, ef, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sptsv(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sptsv(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Sptsv(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Dptsv(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dptsv(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Dptsv(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Cptsv(MatrixLayout matrixLayout, int n, int nrhs, float* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cptsv(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Cptsv(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Zptsv(MatrixLayout matrixLayout, int n, int nrhs, double* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zptsv(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Zptsv(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int SptsvWork(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.SptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int DptsvWork(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.DptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int CptsvWork(MatrixLayout matrixLayout, int n, int nrhs, float* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.CptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int ZptsvWork(MatrixLayout matrixLayout, int n, int nrhs, double* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.ZptsvWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Sptsvx(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, float* d, float* e, float* df, float* ef, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Sptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dptsvx(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, double* d, double* e, double* df, double* ef, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cptsvx(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, float* d, System.IntPtr e, float* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zptsvx(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, double* d, System.IntPtr e, double* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zptsvx(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SptsvxWork(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, float* d, float* e, float* df, float* ef, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work);

                return OpenBLAS.LAPACKE.SptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work);
            }

            public static int DptsvxWork(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, double* d, double* e, double* df, double* ef, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work);

                return OpenBLAS.LAPACKE.DptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work);
            }

            public static int CptsvxWork(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, float* d, System.IntPtr e, float* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZptsvxWork(MatrixLayout matrixLayout, sbyte fact, int n, int nrhs, double* d, System.IntPtr e, double* df, System.IntPtr ef, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZptsvxWork(matrixLayout, fact, n, nrhs, d, e, df, ef, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Spttrf(int n, float* d, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spttrf(n, d, e);

                return OpenBLAS.LAPACKE.Spttrf(n, d, e);
            }

            public static int Dpttrf(int n, double* d, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpttrf(n, d, e);

                return OpenBLAS.LAPACKE.Dpttrf(n, d, e);
            }

            public static int Cpttrf(int n, float* d, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpttrf(n, d, e);

                return OpenBLAS.LAPACKE.Cpttrf(n, d, e);
            }

            public static int Zpttrf(int n, double* d, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpttrf(n, d, e);

                return OpenBLAS.LAPACKE.Zpttrf(n, d, e);
            }

            public static int SpttrfWork(int n, float* d, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpttrfWork(n, d, e);

                return OpenBLAS.LAPACKE.SpttrfWork(n, d, e);
            }

            public static int DpttrfWork(int n, double* d, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpttrfWork(n, d, e);

                return OpenBLAS.LAPACKE.DpttrfWork(n, d, e);
            }

            public static int CpttrfWork(int n, float* d, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpttrfWork(n, d, e);

                return OpenBLAS.LAPACKE.CpttrfWork(n, d, e);
            }

            public static int ZpttrfWork(int n, double* d, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpttrfWork(n, d, e);

                return OpenBLAS.LAPACKE.ZpttrfWork(n, d, e);
            }

            public static int Spttrs(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Spttrs(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Spttrs(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Dpttrs(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dpttrs(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Dpttrs(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int Cpttrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cpttrs(matrixLayout, uplo, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Cpttrs(matrixLayout, uplo, n, nrhs, d, e, b, ldB);
            }

            public static int Zpttrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zpttrs(matrixLayout, uplo, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.Zpttrs(matrixLayout, uplo, n, nrhs, d, e, b, ldB);
            }

            public static int SpttrsWork(MatrixLayout matrixLayout, int n, int nrhs, float* d, float* e, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SpttrsWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.SpttrsWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int DpttrsWork(MatrixLayout matrixLayout, int n, int nrhs, double* d, double* e, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DpttrsWork(matrixLayout, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.DpttrsWork(matrixLayout, n, nrhs, d, e, b, ldB);
            }

            public static int CpttrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CpttrsWork(matrixLayout, uplo, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.CpttrsWork(matrixLayout, uplo, n, nrhs, d, e, b, ldB);
            }

            public static int ZpttrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* d, System.IntPtr e, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZpttrsWork(matrixLayout, uplo, n, nrhs, d, e, b, ldB);

                return OpenBLAS.LAPACKE.ZpttrsWork(matrixLayout, uplo, n, nrhs, d, e, b, ldB);
            }

            public static int Ssbev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Dsbev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbev(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Ssbev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Dsbev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbev2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Ssbev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Ssbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork);
            }

            public static int Dsbev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork);

                return OpenBLAS.LAPACKE.Dsbev2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork);
            }

            public static int Ssbevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Dsbevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbevd(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Ssbevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Dsbevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbevd2stage(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ);
            }

            public static int Ssbevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Ssbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int Dsbevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Dsbevd2stageWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int SsbevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SsbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DsbevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DsbevdWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int SsbevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, float* ab, int ldab, float* w, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.SsbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work);
            }

            public static int DsbevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int kd, double* ab, int ldab, double* w, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.DsbevWork(matrixLayout, jobz, uplo, n, kd, ab, ldab, w, z, ldZ, work);
            }

            public static int Ssbevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, float* ab, int ldab, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsbevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, double* ab, int ldab, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsbevx(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Ssbevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, float* ab, int ldab, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsbevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, double* ab, int ldab, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsbevx2stage(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Ssbevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, float* ab, int ldab, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Ssbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int Dsbevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, double* ab, int ldab, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Dsbevx2stageWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int SsbevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, float* ab, int ldab, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.SsbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int DsbevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int kd, double* ab, int ldab, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.DsbevxWork(matrixLayout, jobz, range, uplo, n, kd, ab, ldab, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int Ssbgst(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* x, int ldX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);

                return OpenBLAS.LAPACKE.Ssbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);
            }

            public static int Dsbgst(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* x, int ldX)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);

                return OpenBLAS.LAPACKE.Dsbgst(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX);
            }

            public static int SsbgstWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* x, int ldX, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work);

                return OpenBLAS.LAPACKE.SsbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work);
            }

            public static int DsbgstWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* x, int ldX, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work);

                return OpenBLAS.LAPACKE.DsbgstWork(matrixLayout, vect, uplo, n, ka, kb, ab, ldab, bb, ldbb, x, ldX, work);
            }

            public static int Ssbgv(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Dsbgv(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbgv(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Ssbgvd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Ssbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int Dsbgvd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dsbgvd(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ);
            }

            public static int SsbgvdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SsbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DsbgvdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DsbgvdWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int SsbgvWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* w, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.SsbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work);
            }

            public static int DsbgvWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* w, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.DsbgvWork(matrixLayout, jobz, uplo, n, ka, kb, ab, ldab, bb, ldbb, w, z, ldZ, work);
            }

            public static int Ssbgvx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsbgvx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsbgvx(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int SsbgvxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, float* ab, int ldab, float* bb, int ldbb, float* q, int ldQ, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.SsbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int DsbgvxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, int ka, int kb, double* ab, int ldab, double* bb, int ldbb, double* q, int ldQ, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.DsbgvxWork(matrixLayout, jobz, range, uplo, n, ka, kb, ab, ldab, bb, ldbb, q, ldQ, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int Ssbtrd(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, float* ab, int ldab, float* d, float* e, float* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);

                return OpenBLAS.LAPACKE.Ssbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);
            }

            public static int Dsbtrd(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, double* ab, int ldab, double* d, double* e, double* q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);

                return OpenBLAS.LAPACKE.Dsbtrd(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ);
            }

            public static int SsbtrdWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, float* ab, int ldab, float* d, float* e, float* q, int ldQ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);

                return OpenBLAS.LAPACKE.SsbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);
            }

            public static int DsbtrdWork(MatrixLayout matrixLayout, sbyte vect, UpLo uplo, int n, int kd, double* ab, int ldab, double* d, double* e, double* q, int ldQ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);

                return OpenBLAS.LAPACKE.DsbtrdWork(matrixLayout, vect, uplo, n, kd, ab, ldab, d, e, q, ldQ, work);
            }

            public static int Ssfrk(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, float alpha, float* a, int ldA, float beta, float* c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.Ssfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int Dsfrk(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, double alpha, double* a, int ldA, double beta, double* c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.Dsfrk(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int SsfrkWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, float alpha, float* a, int ldA, float beta, float* c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.SsfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int DsfrkWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, TransLapack trans, int n, int k, double alpha, double* a, int ldA, double beta, double* c)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);

                return OpenBLAS.LAPACKE.DsfrkWork(matrixLayout, transr, uplo, trans, n, k, alpha, a, ldA, beta, c);
            }

            public static int Dsgesv(MatrixLayout matrixLayout, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* x, int ldX, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, iter);

                return OpenBLAS.LAPACKE.Dsgesv(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, iter);
            }

            public static int DsgesvWork(MatrixLayout matrixLayout, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* x, int ldX, double* work, float* swork, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, work, swork, iter);

                return OpenBLAS.LAPACKE.DsgesvWork(matrixLayout, n, nrhs, a, ldA, ipiv, b, ldB, x, ldX, work, swork, iter);
            }

            public static int Sspcon(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Sspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int Dspcon(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Dspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int Cspcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Cspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int Zspcon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zspcon(matrixLayout, uplo, n, ap, ipiv, anorm, rcond);
            }

            public static int SspconWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work, iwork);
            }

            public static int DspconWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work, iwork);
            }

            public static int CspconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.CspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);
            }

            public static int ZspconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZspconWork(matrixLayout, uplo, n, ap, ipiv, anorm, rcond, work);
            }

            public static int Sspev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* ap, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Sspev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Dspev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* ap, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dspev(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Sspevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* ap, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Sspevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int Dspevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* ap, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dspevd(matrixLayout, jobz, uplo, n, ap, w, z, ldZ);
            }

            public static int SspevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* ap, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SspevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DspevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* ap, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DspevdWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int SspevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* ap, float* w, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.SspevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work);
            }

            public static int DspevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* ap, double* w, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.DspevWork(matrixLayout, jobz, uplo, n, ap, w, z, ldZ, work);
            }

            public static int Sspevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* ap, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Sspevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dspevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* ap, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dspevx(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int SspevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* ap, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.SspevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int DspevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* ap, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.DspevxWork(matrixLayout, jobz, range, uplo, n, ap, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int Sspgst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, float* ap, float* bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspgst(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.Sspgst(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int Dspgst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, double* ap, double* bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspgst(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.Dspgst(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int SspgstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, float* ap, float* bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspgstWork(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.SspgstWork(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int DspgstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, double* ap, double* bp)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspgstWork(matrixLayout, itype, uplo, n, ap, bp);

                return OpenBLAS.LAPACKE.DspgstWork(matrixLayout, itype, uplo, n, ap, bp);
            }

            public static int Sspgv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* ap, float* bp, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Sspgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Dspgv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* ap, double* bp, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dspgv(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Sspgvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* ap, float* bp, float* w, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Sspgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int Dspgvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* ap, double* bp, double* w, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);

                return OpenBLAS.LAPACKE.Dspgvd(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ);
            }

            public static int SspgvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* ap, float* bp, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SspgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DspgvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* ap, double* bp, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DspgvdWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int SspgvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* ap, float* bp, float* w, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.SspgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work);
            }

            public static int DspgvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* ap, double* bp, double* w, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work);

                return OpenBLAS.LAPACKE.DspgvWork(matrixLayout, itype, jobz, uplo, n, ap, bp, w, z, ldZ, work);
            }

            public static int Sspgvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, float* ap, float* bp, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Sspgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dspgvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, double* ap, double* bp, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dspgvx(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int SspgvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, float* ap, float* bp, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.SspgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int DspgvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, double* ap, double* bp, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.DspgvxWork(matrixLayout, itype, jobz, range, uplo, n, ap, bp, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int Dsposv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* x, int ldX, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, iter);

                return OpenBLAS.LAPACKE.Dsposv(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, iter);
            }

            public static int DsposvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* x, int ldX, double* work, float* swork, int* iter)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, work, swork, iter);

                return OpenBLAS.LAPACKE.DsposvWork(matrixLayout, uplo, n, nrhs, a, ldA, b, ldB, x, ldX, work, swork, iter);
            }

            public static int Ssprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* afp, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ssprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dsprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* afp, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dsprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Csprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Csprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zsprfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zsprfs(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int SsprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, float* afp, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DsprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, double* afp, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CsprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZsprfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZsprfsWork(matrixLayout, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Sspsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Sspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Dspsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Cspsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Cspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Zspsv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zspsv(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int SspsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int DspsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int CspsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ZspsvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZspsvWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Sspsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* ap, float* afp, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Sspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dspsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* ap, double* afp, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Cspsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Cspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zspsvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zspsvx(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SspsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* ap, float* afp, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int DspsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* ap, double* afp, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, iwork);
            }

            public static int CspsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int ZspsvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr ap, System.IntPtr afp, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZspsvxWork(matrixLayout, fact, uplo, n, nrhs, ap, afp, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, rwork);
            }

            public static int Ssptrd(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* d, float* e, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssptrd(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.Ssptrd(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int Dsptrd(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* d, double* e, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsptrd(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.Dsptrd(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int SsptrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* d, float* e, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsptrdWork(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.SsptrdWork(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int DsptrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* d, double* e, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsptrdWork(matrixLayout, uplo, n, ap, d, e, tau);

                return OpenBLAS.LAPACKE.DsptrdWork(matrixLayout, uplo, n, ap, d, e, tau);
            }

            public static int Ssptrf(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Ssptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Dsptrf(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Dsptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Csptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Csptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Zsptrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsptrf(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Zsptrf(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int SsptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.SsptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int DsptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.DsptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int CsptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.CsptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int ZsptrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsptrfWork(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.ZsptrfWork(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Ssptri(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Ssptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Dsptri(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Dsptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Csptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Csptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int Zsptri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsptri(matrixLayout, uplo, n, ap, ipiv);

                return OpenBLAS.LAPACKE.Zsptri(matrixLayout, uplo, n, ap, ipiv);
            }

            public static int SsptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, int* ipiv, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.SsptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int DsptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, int* ipiv, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.DsptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int CsptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.CsptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int ZsptriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsptriWork(matrixLayout, uplo, n, ap, ipiv, work);

                return OpenBLAS.LAPACKE.ZsptriWork(matrixLayout, uplo, n, ap, ipiv, work);
            }

            public static int Ssptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Dsptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Csptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Zsptrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsptrs(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int SsptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* ap, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int DsptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* ap, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int CsptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int ZsptrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr ap, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsptrsWork(matrixLayout, uplo, n, nrhs, ap, ipiv, b, ldB);
            }

            public static int Sstebz(sbyte range, sbyte order, int n, float vl, float vu, int il, int iu, float abstol, float* d, float* e, int* m, int* nsplit, float* w, int* iblock, int* isplit)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit);

                return OpenBLAS.LAPACKE.Sstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit);
            }

            public static int Dstebz(sbyte range, sbyte order, int n, double vl, double vu, int il, int iu, double abstol, double* d, double* e, int* m, int* nsplit, double* w, int* iblock, int* isplit)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit);

                return OpenBLAS.LAPACKE.Dstebz(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit);
            }

            public static int SstebzWork(sbyte range, sbyte order, int n, float vl, float vu, int il, int iu, float abstol, float* d, float* e, int* m, int* nsplit, float* w, int* iblock, int* isplit, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstebzWork(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork);

                return OpenBLAS.LAPACKE.SstebzWork(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork);
            }

            public static int DstebzWork(sbyte range, sbyte order, int n, double vl, double vu, int il, int iu, double abstol, double* d, double* e, int* m, int* nsplit, double* w, int* iblock, int* isplit, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstebzWork(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork);

                return OpenBLAS.LAPACKE.DstebzWork(range, order, n, vl, vu, il, iu, abstol, d, e, m, nsplit, w, iblock, isplit, work, iwork);
            }

            public static int Sstedc(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstedc(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Sstedc(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Dstedc(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstedc(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Dstedc(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Cstedc(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cstedc(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Cstedc(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Zstedc(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zstedc(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Zstedc(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int SstedcWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DstedcWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int CstedcWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int ZstedcWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZstedcWork(matrixLayout, compz, n, d, e, z, ldZ, work, lwork, rwork, lrwork, iwork, liwork);
            }

            public static int Sstegr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Sstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Dstegr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Dstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Cstegr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Cstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Zstegr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Zstegr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int SstegrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int DstegrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int CstegrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, System.IntPtr z, int ldZ, int* isuppz, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int ZstegrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, System.IntPtr z, int ldZ, int* isuppz, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZstegrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int Sstein(MatrixLayout matrixLayout, int n, float* d, float* e, int m, float* w, int* iblock, int* isplit, float* z, int ldZ, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);

                return OpenBLAS.LAPACKE.Sstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);
            }

            public static int Dstein(MatrixLayout matrixLayout, int n, double* d, double* e, int m, double* w, int* iblock, int* isplit, double* z, int ldZ, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);

                return OpenBLAS.LAPACKE.Dstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);
            }

            public static int Cstein(MatrixLayout matrixLayout, int n, float* d, float* e, int m, float* w, int* iblock, int* isplit, System.IntPtr z, int ldZ, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);

                return OpenBLAS.LAPACKE.Cstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);
            }

            public static int Zstein(MatrixLayout matrixLayout, int n, double* d, double* e, int m, double* w, int* iblock, int* isplit, System.IntPtr z, int ldZ, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);

                return OpenBLAS.LAPACKE.Zstein(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, ifailv);
            }

            public static int SsteinWork(MatrixLayout matrixLayout, int n, float* d, float* e, int m, float* w, int* iblock, int* isplit, float* z, int ldZ, float* work, int* iwork, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);

                return OpenBLAS.LAPACKE.SsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);
            }

            public static int DsteinWork(MatrixLayout matrixLayout, int n, double* d, double* e, int m, double* w, int* iblock, int* isplit, double* z, int ldZ, double* work, int* iwork, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);

                return OpenBLAS.LAPACKE.DsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);
            }

            public static int CsteinWork(MatrixLayout matrixLayout, int n, float* d, float* e, int m, float* w, int* iblock, int* isplit, System.IntPtr z, int ldZ, float* work, int* iwork, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);

                return OpenBLAS.LAPACKE.CsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);
            }

            public static int ZsteinWork(MatrixLayout matrixLayout, int n, double* d, double* e, int m, double* w, int* iblock, int* isplit, System.IntPtr z, int ldZ, double* work, int* iwork, int* ifailv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);

                return OpenBLAS.LAPACKE.ZsteinWork(matrixLayout, n, d, e, m, w, iblock, isplit, z, ldZ, work, iwork, ifailv);
            }

            public static int Sstemr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* m, float* w, float* z, int ldZ, int nzc, int* isuppz, int* tryrac)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);

                return OpenBLAS.LAPACKE.Sstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);
            }

            public static int Dstemr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* m, double* w, double* z, int ldZ, int nzc, int* isuppz, int* tryrac)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);

                return OpenBLAS.LAPACKE.Dstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);
            }

            public static int Cstemr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* m, float* w, System.IntPtr z, int ldZ, int nzc, int* isuppz, int* tryrac)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);

                return OpenBLAS.LAPACKE.Cstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);
            }

            public static int Zstemr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* m, double* w, System.IntPtr z, int ldZ, int nzc, int* isuppz, int* tryrac)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);

                return OpenBLAS.LAPACKE.Zstemr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac);
            }

            public static int SstemrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* m, float* w, float* z, int ldZ, int nzc, int* isuppz, int* tryrac, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);
            }

            public static int DstemrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* m, double* w, double* z, int ldZ, int nzc, int* isuppz, int* tryrac, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);
            }

            public static int CstemrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, int* m, float* w, System.IntPtr z, int ldZ, int nzc, int* isuppz, int* tryrac, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);
            }

            public static int ZstemrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, int* m, double* w, System.IntPtr z, int ldZ, int nzc, int* isuppz, int* tryrac, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZstemrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, m, w, z, ldZ, nzc, isuppz, tryrac, work, lwork, iwork, liwork);
            }

            public static int Ssteqr(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Ssteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Dsteqr(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Dsteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Csteqr(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Csteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int Zsteqr(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsteqr(matrixLayout, compz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Zsteqr(matrixLayout, compz, n, d, e, z, ldZ);
            }

            public static int SsteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.SsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int DsteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.DsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int CsteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, float* d, float* e, System.IntPtr z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.CsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int ZsteqrWork(MatrixLayout matrixLayout, sbyte compz, int n, double* d, double* e, System.IntPtr z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.ZsteqrWork(matrixLayout, compz, n, d, e, z, ldZ, work);
            }

            public static int Ssterf(int n, float* d, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssterf(n, d, e);

                return OpenBLAS.LAPACKE.Ssterf(n, d, e);
            }

            public static int Dsterf(int n, double* d, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsterf(n, d, e);

                return OpenBLAS.LAPACKE.Dsterf(n, d, e);
            }

            public static int SsterfWork(int n, float* d, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsterfWork(n, d, e);

                return OpenBLAS.LAPACKE.SsterfWork(n, d, e);
            }

            public static int DsterfWork(int n, double* d, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsterfWork(n, d, e);

                return OpenBLAS.LAPACKE.DsterfWork(n, d, e);
            }

            public static int Sstev(MatrixLayout matrixLayout, sbyte jobz, int n, float* d, float* e, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstev(matrixLayout, jobz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Sstev(matrixLayout, jobz, n, d, e, z, ldZ);
            }

            public static int Dstev(MatrixLayout matrixLayout, sbyte jobz, int n, double* d, double* e, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstev(matrixLayout, jobz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Dstev(matrixLayout, jobz, n, d, e, z, ldZ);
            }

            public static int Sstevd(MatrixLayout matrixLayout, sbyte jobz, int n, float* d, float* e, float* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstevd(matrixLayout, jobz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Sstevd(matrixLayout, jobz, n, d, e, z, ldZ);
            }

            public static int Dstevd(MatrixLayout matrixLayout, sbyte jobz, int n, double* d, double* e, double* z, int ldZ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstevd(matrixLayout, jobz, n, d, e, z, ldZ);

                return OpenBLAS.LAPACKE.Dstevd(matrixLayout, jobz, n, d, e, z, ldZ);
            }

            public static int SstevdWork(MatrixLayout matrixLayout, sbyte jobz, int n, float* d, float* e, float* z, int ldZ, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstevdWork(matrixLayout, jobz, n, d, e, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SstevdWork(matrixLayout, jobz, n, d, e, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int DstevdWork(MatrixLayout matrixLayout, sbyte jobz, int n, double* d, double* e, double* z, int ldZ, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstevdWork(matrixLayout, jobz, n, d, e, z, ldZ, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DstevdWork(matrixLayout, jobz, n, d, e, z, ldZ, work, lwork, iwork, liwork);
            }

            public static int Sstevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstevr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Sstevr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Dstevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstevr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Dstevr(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int SstevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstevrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SstevrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int DstevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstevrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DstevrWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int SstevWork(MatrixLayout matrixLayout, sbyte jobz, int n, float* d, float* e, float* z, int ldZ, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstevWork(matrixLayout, jobz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.SstevWork(matrixLayout, jobz, n, d, e, z, ldZ, work);
            }

            public static int DstevWork(MatrixLayout matrixLayout, sbyte jobz, int n, double* d, double* e, double* z, int ldZ, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstevWork(matrixLayout, jobz, n, d, e, z, ldZ, work);

                return OpenBLAS.LAPACKE.DstevWork(matrixLayout, jobz, n, d, e, z, ldZ, work);
            }

            public static int Sstevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Sstevx(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Sstevx(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dstevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dstevx(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dstevx(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int SstevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, float* d, float* e, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SstevxWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.SstevxWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int DstevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, int n, double* d, double* e, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DstevxWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);

                return OpenBLAS.LAPACKE.DstevxWork(matrixLayout, jobz, range, n, d, e, vl, vu, il, iu, abstol, m, w, z, ldZ, work, iwork, ifail);
            }

            public static int Ssycon(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Ssycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Dsycon(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Dsycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Csycon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Csycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Zsycon(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zsycon(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond);
            }

            public static int Ssycon3(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Ssycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Dsycon3(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Dsycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Csycon3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, float anorm, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Csycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Zsycon3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, double anorm, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);

                return OpenBLAS.LAPACKE.Zsycon3(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond);
            }

            public static int Ssycon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.Ssycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work, iwork);
            }

            public static int Dsycon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.Dsycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work, iwork);
            }

            public static int Csycon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.Csycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);
            }

            public static int Zsycon3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.Zsycon3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, anorm, rcond, work);
            }

            public static int Ssyconv(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, float* a, int ldA, int* ipiv, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.Ssyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int Dsyconv(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, double* a, int ldA, int* ipiv, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.Dsyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int Csyconv(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.Csyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int Zsyconv(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.Zsyconv(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int SsyconvWork(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, float* a, int ldA, int* ipiv, float* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.SsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int DsyconvWork(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, double* a, int ldA, int* ipiv, double* e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.DsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int CsyconvWork(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.CsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int ZsyconvWork(MatrixLayout matrixLayout, UpLo uplo, sbyte way, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr e)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);

                return OpenBLAS.LAPACKE.ZsyconvWork(matrixLayout, uplo, way, n, a, ldA, ipiv, e);
            }

            public static int SsyconWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float anorm, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.SsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work, iwork);
            }

            public static int DsyconWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double anorm, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work, iwork);
            }

            public static int CsyconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, float anorm, float* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.CsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);
            }

            public static int ZsyconWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, double anorm, double* rcond, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);

                return OpenBLAS.LAPACKE.ZsyconWork(matrixLayout, uplo, n, a, ldA, ipiv, anorm, rcond, work);
            }

            public static int Ssyequb(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Ssyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int Dsyequb(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Dsyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int Csyequb(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Csyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int Zsyequb(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);

                return OpenBLAS.LAPACKE.Zsyequb(matrixLayout, uplo, n, a, ldA, s, scond, amax);
            }

            public static int SsyequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* s, float* scond, float* amax, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.SsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int DsyequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* s, double* scond, double* amax, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.DsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int CsyequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, float* s, float* scond, float* amax, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.CsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int ZsyequbWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, double* s, double* scond, double* amax, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);

                return OpenBLAS.LAPACKE.ZsyequbWork(matrixLayout, uplo, n, a, ldA, s, scond, amax, work);
            }

            public static int Ssyev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyev(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Ssyev(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Dsyev(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyev(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Dsyev(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Ssyev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Ssyev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Dsyev2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Dsyev2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Ssyev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);

                return OpenBLAS.LAPACKE.Ssyev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);
            }

            public static int Dsyev2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);

                return OpenBLAS.LAPACKE.Dsyev2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);
            }

            public static int Ssyevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevd(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Ssyevd(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Dsyevd(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevd(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Dsyevd(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Ssyevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Ssyevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Dsyevd2stage(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);

                return OpenBLAS.LAPACKE.Dsyevd2stage(matrixLayout, jobz, uplo, n, a, ldA, w);
            }

            public static int Ssyevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Ssyevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);
            }

            public static int Dsyevd2stageWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Dsyevd2stageWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);
            }

            public static int SsyevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SsyevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);
            }

            public static int DsyevdWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DsyevdWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork, iwork, liwork);
            }

            public static int Ssyevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Ssyevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Dsyevr(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Dsyevr(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Ssyevr2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Ssyevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Dsyevr2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);

                return OpenBLAS.LAPACKE.Dsyevr2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz);
            }

            public static int Ssyevr2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Ssyevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int Dsyevr2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.Dsyevr2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int SsyevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* isuppz, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SsyevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int DsyevrWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* isuppz, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DsyevrWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, isuppz, work, lwork, iwork, liwork);
            }

            public static int SsyevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* w, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);

                return OpenBLAS.LAPACKE.SsyevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);
            }

            public static int DsyevWork(MatrixLayout matrixLayout, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* w, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);

                return OpenBLAS.LAPACKE.DsyevWork(matrixLayout, jobz, uplo, n, a, ldA, w, work, lwork);
            }

            public static int Ssyevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssyevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsyevx(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsyevx(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Ssyevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssyevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsyevx2stage(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsyevx2stage(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Ssyevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Ssyevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int Dsyevx2stageWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.Dsyevx2stageWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int SsyevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.SsyevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int DsyevxWork(MatrixLayout matrixLayout, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.DsyevxWork(matrixLayout, jobz, range, uplo, n, a, ldA, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int Ssygst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ssygst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int Dsygst(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dsygst(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int SsygstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsygstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.SsygstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int DsygstWork(MatrixLayout matrixLayout, int itype, UpLo uplo, int n, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsygstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.DsygstWork(matrixLayout, itype, uplo, n, a, ldA, b, ldB);
            }

            public static int Ssygv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Ssygv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Dsygv(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Dsygv(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Ssygv2stage(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Ssygv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Dsygv2stage(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Dsygv2stage(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Ssygv2stageWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);

                return OpenBLAS.LAPACKE.Ssygv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);
            }

            public static int Dsygv2stageWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);

                return OpenBLAS.LAPACKE.Dsygv2stageWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);
            }

            public static int Ssygvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Ssygvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int Dsygvd(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);

                return OpenBLAS.LAPACKE.Dsygvd(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w);
            }

            public static int SsygvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsygvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.SsygvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, iwork, liwork);
            }

            public static int DsygvdWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsygvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DsygvdWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork, iwork, liwork);
            }

            public static int SsygvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float* w, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsygvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);

                return OpenBLAS.LAPACKE.SsygvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);
            }

            public static int DsygvWork(MatrixLayout matrixLayout, int itype, sbyte jobz, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double* w, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsygvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);

                return OpenBLAS.LAPACKE.DsygvWork(matrixLayout, itype, jobz, uplo, n, a, ldA, b, ldB, w, work, lwork);
            }

            public static int Ssygvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssygvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Ssygvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int Dsygvx(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsygvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);

                return OpenBLAS.LAPACKE.Dsygvx(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, ifail);
            }

            public static int SsygvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, float* a, int ldA, float* b, int ldB, float vl, float vu, int il, int iu, float abstol, int* m, float* w, float* z, int ldZ, float* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsygvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.SsygvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int DsygvxWork(MatrixLayout matrixLayout, int itype, sbyte jobz, sbyte range, UpLo uplo, int n, double* a, int ldA, double* b, int ldB, double vl, double vu, int il, int iu, double abstol, int* m, double* w, double* z, int ldZ, double* work, int lwork, int* iwork, int* ifail)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsygvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);

                return OpenBLAS.LAPACKE.DsygvxWork(matrixLayout, itype, jobz, range, uplo, n, a, ldA, b, ldB, vl, vu, il, iu, abstol, m, w, z, ldZ, work, lwork, iwork, ifail);
            }

            public static int Csyr(MatrixLayout matrixLayout, UpLo uplo, int n, ComplexFloat alpha, System.IntPtr x, int incX, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyr(matrixLayout, uplo, n, alpha, x, incX, a, ldA);

                return OpenBLAS.LAPACKE.Csyr(matrixLayout, uplo, n, alpha, x, incX, a, ldA);
            }

            public static int Zsyr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyr(matrixLayout, uplo, n, alpha, x, incX, a, ldA);

                return OpenBLAS.LAPACKE.Zsyr(matrixLayout, uplo, n, alpha, x, incX, a, ldA);
            }

            public static int Ssyrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ssyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dsyrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dsyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Csyrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Csyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int Zsyrfs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Zsyrfs(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr);
            }

            public static int SsyrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.SsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DsyrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CsyrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZsyrfsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZsyrfsWork(matrixLayout, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Ssyrfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Ssyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dsyrfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dsyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Csyrfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Csyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zsyrfsx(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zsyrfsx(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SsyrfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DsyrfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CsyrfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZsyrfsxWork(MatrixLayout matrixLayout, UpLo uplo, sbyte equed, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZsyrfsxWork(matrixLayout, uplo, equed, n, nrhs, a, ldA, af, ldaf, ipiv, s, b, ldB, x, ldX, rcond, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int CsyrWork(MatrixLayout matrixLayout, UpLo uplo, int n, ComplexFloat alpha, System.IntPtr x, int incX, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyrWork(matrixLayout, uplo, n, alpha, x, incX, a, ldA);

                return OpenBLAS.LAPACKE.CsyrWork(matrixLayout, uplo, n, alpha, x, incX, a, ldA);
            }

            public static int ZsyrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr alpha, System.IntPtr x, int incX, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyrWork(matrixLayout, uplo, n, alpha, x, incX, a, ldA);

                return OpenBLAS.LAPACKE.ZsyrWork(matrixLayout, uplo, n, alpha, x, incX, a, ldA);
            }

            public static int Ssysv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Dsysv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Csysv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zsysv(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsysv(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsysvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsysvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsysvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsysvAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsysvAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsysvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.SsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int DsysvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.DsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int CsysvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.CsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZsysvAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZsysvAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int SsysvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int DsysvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int CsysvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int ZsysvAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsysvAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB, work, lwork);
            }

            public static int SsysvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int DsysvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int CsysvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZsysvAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsysvAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int SsysvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* e, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int DsysvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* e, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int CsysvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int ZsysvRk(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsysvRk(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int SsysvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* e, int* ipiv, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int DsysvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* e, int* ipiv, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int CsysvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int ZsysvRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsysvRkWork(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB, work, lwork);
            }

            public static int SsysvRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsysvRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsysvRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsysvRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsysvRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsysvRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int DsysvRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int CsysvRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZsysvRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsysvRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int SsysvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int DsysvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int CsysvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZsysvWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsysvWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int Ssysvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Ssysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Dsysvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Dsysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Csysvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Csysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int Zsysvx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);

                return OpenBLAS.LAPACKE.Zsysvx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr);
            }

            public static int SsysvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, float* b, int ldB, float* x, int ldX, float* rcond, float* ferr, float* berr, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, iwork);

                return OpenBLAS.LAPACKE.SsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, iwork);
            }

            public static int DsysvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, double* b, int ldB, double* x, int ldX, double* rcond, double* ferr, double* berr, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, iwork);
            }

            public static int CsysvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* ferr, float* berr, System.IntPtr work, int lwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.CsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);
            }

            public static int ZsysvxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* ferr, double* berr, System.IntPtr work, int lwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);

                return OpenBLAS.LAPACKE.ZsysvxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, b, ldB, x, ldX, rcond, ferr, berr, work, lwork, rwork);
            }

            public static int Ssysvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Ssysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Dsysvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Dsysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Csysvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Csysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int Zsysvxx(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);

                return OpenBLAS.LAPACKE.Zsysvxx(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters);
            }

            public static int SsysvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, float* a, int ldA, float* af, int ldaf, int* ipiv, sbyte* equed, float* s, float* b, int ldB, float* x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.SsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int DsysvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, double* a, int ldA, double* af, int ldaf, int* ipiv, sbyte* equed, double* s, double* b, int ldB, double* x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);

                return OpenBLAS.LAPACKE.DsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, iwork);
            }

            public static int CsysvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, float* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* rcond, float* rpvgrw, float* berr, int n_err_bnds, float* err_bnds_norm, float* err_bnds_comp, int nparams, float* parameters, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.CsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int ZsysvxxWork(MatrixLayout matrixLayout, sbyte fact, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr af, int ldaf, int* ipiv, sbyte* equed, double* s, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* rcond, double* rpvgrw, double* berr, int n_err_bnds, double* err_bnds_norm, double* err_bnds_comp, int nparams, double* parameters, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);

                return OpenBLAS.LAPACKE.ZsysvxxWork(matrixLayout, fact, uplo, n, nrhs, a, ldA, af, ldaf, ipiv, equed, s, b, ldB, x, ldX, rcond, rpvgrw, berr, n_err_bnds, err_bnds_norm, err_bnds_comp, nparams, parameters, work, rwork);
            }

            public static int Ssyswapr(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Ssyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Dsyswapr(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Dsyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Csyswapr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Csyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Zsyswapr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.Zsyswapr(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int SsyswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.SsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int DsyswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.DsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int CsyswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.CsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int ZsyswaprWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int i1, int i2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);

                return OpenBLAS.LAPACKE.ZsyswaprWork(matrixLayout, uplo, n, a, ldA, i1, i2);
            }

            public static int Ssytrd(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* d, float* e, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrd(matrixLayout, uplo, n, a, ldA, d, e, tau);

                return OpenBLAS.LAPACKE.Ssytrd(matrixLayout, uplo, n, a, ldA, d, e, tau);
            }

            public static int Dsytrd(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* d, double* e, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrd(matrixLayout, uplo, n, a, ldA, d, e, tau);

                return OpenBLAS.LAPACKE.Dsytrd(matrixLayout, uplo, n, a, ldA, d, e, tau);
            }

            public static int SsytrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* d, float* e, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);

                return OpenBLAS.LAPACKE.SsytrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);
            }

            public static int DsytrdWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* d, double* e, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);

                return OpenBLAS.LAPACKE.DsytrdWork(matrixLayout, uplo, n, a, ldA, d, e, tau, work, lwork);
            }

            public static int Ssytrf(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Ssytrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Dsytrf(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dsytrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Csytrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Csytrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zsytrf(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrf(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zsytrf(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int SsytrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.SsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int DsytrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.DsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int CsytrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.CsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ZsytrfAa(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ZsytrfAa(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int SsytrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.SsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int DsytrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.DsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int CsytrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.CsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int ZsytrfAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);

                return OpenBLAS.LAPACKE.ZsytrfAa2stage(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2);
            }

            public static int SsytrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.SsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int DsytrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.DsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int CsytrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.CsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int ZsytrfAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrfAa2stageWork(matrixLayout, uplo, n, a, ldA, tb, ltb, ipiv, ipiv2, work, lwork);
            }

            public static int SsytrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.SsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int DsytrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.DsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int CsytrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.CsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZsytrfAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrfAaWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int SsytrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.SsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int DsytrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.DsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int CsytrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.CsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int ZsytrfRk(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.ZsytrfRk(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int SsytrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.SsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int DsytrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.DsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int CsytrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.CsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int ZsytrfRkWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrfRkWork(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int SsytrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.SsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int DsytrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.DsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int CsytrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.CsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int ZsytrfRook(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.ZsytrfRook(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int SsytrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.SsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int DsytrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.DsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int CsytrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.CsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZsytrfRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrfRookWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int SsytrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.SsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int DsytrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.DsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int CsytrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.CsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int ZsytrfWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrfWork(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Ssytri(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Ssytri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Dsytri(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dsytri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Csytri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Csytri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zsytri(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zsytri(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Ssytri2(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Ssytri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Dsytri2(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Dsytri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Csytri2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Csytri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Zsytri2(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri2(matrixLayout, uplo, n, a, ldA, ipiv);

                return OpenBLAS.LAPACKE.Zsytri2(matrixLayout, uplo, n, a, ldA, ipiv);
            }

            public static int Ssytri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Ssytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Dsytri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Dsytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Csytri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Csytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Zsytri2Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Zsytri2Work(matrixLayout, uplo, n, a, ldA, ipiv, work, lwork);
            }

            public static int Ssytri2x(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Ssytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Dsytri2x(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Dsytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Csytri2x(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Csytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Zsytri2x(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);

                return OpenBLAS.LAPACKE.Zsytri2x(matrixLayout, uplo, n, a, ldA, ipiv, nb);
            }

            public static int Ssytri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Ssytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Dsytri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Dsytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Csytri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Csytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Zsytri2xWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work, int nb)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);

                return OpenBLAS.LAPACKE.Zsytri2xWork(matrixLayout, uplo, n, a, ldA, ipiv, work, nb);
            }

            public static int Ssytri3(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Ssytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Dsytri3(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Dsytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Csytri3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Csytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Zsytri3(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);

                return OpenBLAS.LAPACKE.Zsytri3(matrixLayout, uplo, n, a, ldA, e, ipiv);
            }

            public static int Ssytri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* e, int* ipiv, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Ssytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int Dsytri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* e, int* ipiv, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Dsytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int Csytri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Csytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int Zsytri3Work(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);

                return OpenBLAS.LAPACKE.Zsytri3Work(matrixLayout, uplo, n, a, ldA, e, ipiv, work, lwork);
            }

            public static int SsytriWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, int* ipiv, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.SsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int DsytriWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, int* ipiv, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.DsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int CsytriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.CsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int ZsytriWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, int* ipiv, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);

                return OpenBLAS.LAPACKE.ZsytriWork(matrixLayout, uplo, n, a, ldA, ipiv, work);
            }

            public static int Ssytrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Dsytrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Csytrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zsytrs(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsytrs(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Ssytrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Dsytrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Csytrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Zsytrs2(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsytrs2(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Ssytrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Ssytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Dsytrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Dsytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Csytrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Csytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Zsytrs2Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);

                return OpenBLAS.LAPACKE.Zsytrs2Work(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work);
            }

            public static int Ssytrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* e, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Dsytrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* e, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Csytrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Zsytrs3(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsytrs3(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Ssytrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* e, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ssytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Ssytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Dsytrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* e, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dsytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Dsytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Csytrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Csytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Csytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int Zsytrs3Work(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr e, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zsytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.Zsytrs3Work(matrixLayout, uplo, n, nrhs, a, ldA, e, ipiv, b, ldB);
            }

            public static int SsytrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsytrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsytrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsytrsAa(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsAa(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsytrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int DsytrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int CsytrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZsytrsAa2stage(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsAa2stage(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int SsytrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, float* tb, int ltb, int* ipiv, int* ipiv2, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int DsytrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, double* tb, int ltb, int* ipiv, int* ipiv2, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int CsytrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int ZsytrsAa2stageWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr tb, int ltb, int* ipiv, int* ipiv2, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsAa2stageWork(matrixLayout, uplo, n, nrhs, a, ldA, tb, ltb, ipiv, ipiv2, b, ldB);
            }

            public static int SsytrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.SsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int DsytrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.DsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int CsytrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.CsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int ZsytrsAaWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);

                return OpenBLAS.LAPACKE.ZsytrsAaWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB, work, lwork);
            }

            public static int SsytrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsytrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsytrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsytrsRook(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsRook(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsytrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsytrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsytrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsytrsRookWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsRookWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int SsytrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, float* a, int ldA, int* ipiv, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.SsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.SsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int DsytrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, double* a, int ldA, int* ipiv, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.DsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int CsytrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.CsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int ZsytrsWork(MatrixLayout matrixLayout, UpLo uplo, int n, int nrhs, System.IntPtr a, int ldA, int* ipiv, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);

                return OpenBLAS.LAPACKE.ZsytrsWork(matrixLayout, uplo, n, nrhs, a, ldA, ipiv, b, ldB);
            }

            public static int Stbcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, float* ab, int ldab, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);

                return OpenBLAS.LAPACKE.Stbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);
            }

            public static int Dtbcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, double* ab, int ldab, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);

                return OpenBLAS.LAPACKE.Dtbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);
            }

            public static int Ctbcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, System.IntPtr ab, int ldab, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);

                return OpenBLAS.LAPACKE.Ctbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);
            }

            public static int Ztbcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, System.IntPtr ab, int ldab, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);

                return OpenBLAS.LAPACKE.Ztbcon(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond);
            }

            public static int StbconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, float* ab, int ldab, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork);

                return OpenBLAS.LAPACKE.StbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork);
            }

            public static int DtbconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, double* ab, int ldab, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, iwork);
            }

            public static int CtbconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, System.IntPtr ab, int ldab, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork);
            }

            public static int ZtbconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, int kd, System.IntPtr ab, int ldab, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZtbconWork(matrixLayout, norm, uplo, diag, n, kd, ab, ldab, rcond, work, rwork);
            }

            public static int Stbrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Stbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dtbrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dtbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ctbrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ctbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ztbrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ztbrfs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr);
            }

            public static int StbrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.StbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DtbrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CtbrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZtbrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZtbrfsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Stbtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Stbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Dtbtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Dtbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Ctbtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Ctbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Ztbtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.Ztbtrs(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int StbtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, float* ab, int ldab, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.StbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int DtbtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, double* ab, int ldab, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.DtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int CtbtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.CtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int ZtbtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int kd, int nrhs, System.IntPtr ab, int ldab, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);

                return OpenBLAS.LAPACKE.ZtbtrsWork(matrixLayout, uplo, trans, diag, n, kd, nrhs, ab, ldab, b, ldB);
            }

            public static int Stfsm(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, float alpha, float* a, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.Stfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int Dtfsm(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, double alpha, double* a, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.Dtfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int Ctfsm(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, ComplexFloat alpha, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.Ctfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int Ztfsm(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, System.IntPtr alpha, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.Ztfsm(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int StfsmWork(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, float alpha, float* a, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.StfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int DtfsmWork(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, double alpha, double* a, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.DtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int CtfsmWork(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, ComplexFloat alpha, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.CtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int ZtfsmWork(MatrixLayout matrixLayout, sbyte transr, sbyte side, UpLo uplo, TransLapack trans, sbyte diag, int m, int n, System.IntPtr alpha, System.IntPtr a, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);

                return OpenBLAS.LAPACKE.ZtfsmWork(matrixLayout, transr, side, uplo, trans, diag, m, n, alpha, a, b, ldB);
            }

            public static int Stftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stftri(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.Stftri(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int Dtftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtftri(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.Dtftri(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int Ctftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctftri(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.Ctftri(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int Ztftri(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztftri(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.Ztftri(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int StftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, float* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StftriWork(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.StftriWork(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int DtftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, double* a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtftriWork(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.DtftriWork(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int CtftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtftriWork(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.CtftriWork(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int ZtftriWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, sbyte diag, int n, System.IntPtr a)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtftriWork(matrixLayout, transr, uplo, diag, n, a);

                return OpenBLAS.LAPACKE.ZtftriWork(matrixLayout, transr, uplo, diag, n, a);
            }

            public static int Stfttp(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* arf, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stfttp(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.Stfttp(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int Dtfttp(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* arf, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtfttp(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.Dtfttp(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int Ctfttp(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctfttp(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.Ctfttp(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int Ztfttp(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztfttp(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.Ztfttp(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int StfttpWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* arf, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StfttpWork(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.StfttpWork(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int DtfttpWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* arf, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtfttpWork(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.DtfttpWork(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int CtfttpWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtfttpWork(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.CtfttpWork(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int ZtfttpWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtfttpWork(matrixLayout, transr, uplo, n, arf, ap);

                return OpenBLAS.LAPACKE.ZtfttpWork(matrixLayout, transr, uplo, n, arf, ap);
            }

            public static int Stfttr(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* arf, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stfttr(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.Stfttr(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int Dtfttr(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* arf, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtfttr(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.Dtfttr(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int Ctfttr(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctfttr(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.Ctfttr(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int Ztfttr(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztfttr(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.Ztfttr(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int StfttrWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* arf, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.StfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int DtfttrWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* arf, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.DtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int CtfttrWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.CtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int ZtfttrWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr arf, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);

                return OpenBLAS.LAPACKE.ZtfttrWork(matrixLayout, transr, uplo, n, arf, a, ldA);
            }

            public static int Stgevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, float* s, int ldS, float* p, int ldP, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Stgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Dtgevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, double* s, int ldS, double* p, int ldP, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Dtgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Ctgevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr s, int ldS, System.IntPtr p, int ldP, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Ctgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Ztgevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr s, int ldS, System.IntPtr p, int ldP, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Ztgevc(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int StgevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, float* s, int ldS, float* p, int ldP, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work);

                return OpenBLAS.LAPACKE.StgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work);
            }

            public static int DtgevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, double* s, int ldS, double* p, int ldP, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work);

                return OpenBLAS.LAPACKE.DtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work);
            }

            public static int CtgevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr s, int ldS, System.IntPtr p, int ldP, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work, rwork);

                return OpenBLAS.LAPACKE.CtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work, rwork);
            }

            public static int ZtgevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr s, int ldS, System.IntPtr p, int ldP, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work, rwork);

                return OpenBLAS.LAPACKE.ZtgevcWork(matrixLayout, side, howmny, select, n, s, ldS, p, ldP, vl, ldvl, vr, ldvr, mm, m, work, rwork);
            }

            public static int Stgexc(MatrixLayout matrixLayout, int wantq, int wantz, int n, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ, int* ifst, int* ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.Stgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int Dtgexc(MatrixLayout matrixLayout, int wantq, int wantz, int n, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ, int* ifst, int* ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.Dtgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int Ctgexc(MatrixLayout matrixLayout, int wantq, int wantz, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.Ctgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int Ztgexc(MatrixLayout matrixLayout, int wantq, int wantz, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.Ztgexc(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int StgexcWork(MatrixLayout matrixLayout, int wantq, int wantz, int n, float* a, int ldA, float* b, int ldB, float* q, int ldQ, float* z, int ldZ, int* ifst, int* ilst, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst, work, lwork);

                return OpenBLAS.LAPACKE.StgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst, work, lwork);
            }

            public static int DtgexcWork(MatrixLayout matrixLayout, int wantq, int wantz, int n, double* a, int ldA, double* b, int ldB, double* q, int ldQ, double* z, int ldZ, int* ifst, int* ilst, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst, work, lwork);

                return OpenBLAS.LAPACKE.DtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst, work, lwork);
            }

            public static int CtgexcWork(MatrixLayout matrixLayout, int wantq, int wantz, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.CtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int ZtgexcWork(MatrixLayout matrixLayout, int wantq, int wantz, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);

                return OpenBLAS.LAPACKE.ZtgexcWork(matrixLayout, wantq, wantz, n, a, ldA, b, ldB, q, ldQ, z, ldZ, ifst, ilst);
            }

            public static int Stgsen(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* q, int ldQ, float* z, int ldZ, int* m, float* pl, float* pr, float* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif);

                return OpenBLAS.LAPACKE.Stgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif);
            }

            public static int Dtgsen(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* q, int ldQ, double* z, int ldZ, int* m, double* pl, double* pr, double* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif);

                return OpenBLAS.LAPACKE.Dtgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif);
            }

            public static int Ctgsen(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int* m, float* pl, float* pr, float* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif);

                return OpenBLAS.LAPACKE.Ctgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif);
            }

            public static int Ztgsen(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int* m, double* pl, double* pr, double* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif);

                return OpenBLAS.LAPACKE.Ztgsen(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif);
            }

            public static int StgsenWork(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, float* a, int ldA, float* b, int ldB, float* alphar, float* alphai, float* beta, float* q, int ldQ, float* z, int ldZ, int* m, float* pl, float* pr, float* dif, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.StgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);
            }

            public static int DtgsenWork(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, double* a, int ldA, double* b, int ldB, double* alphar, double* alphai, double* beta, double* q, int ldQ, double* z, int ldZ, int* m, double* pl, double* pr, double* dif, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alphar, alphai, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);
            }

            public static int CtgsenWork(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int* m, float* pl, float* pr, float* dif, System.IntPtr work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.CtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);
            }

            public static int ZtgsenWork(MatrixLayout matrixLayout, int ijob, int wantq, int wantz, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr alpha, System.IntPtr beta, System.IntPtr q, int ldQ, System.IntPtr z, int ldZ, int* m, double* pl, double* pr, double* dif, System.IntPtr work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.ZtgsenWork(matrixLayout, ijob, wantq, wantz, select, n, a, ldA, b, ldB, alpha, beta, q, ldQ, z, ldZ, m, pl, pr, dif, work, lwork, iwork, liwork);
            }

            public static int Stgsja(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, float* a, int ldA, float* b, int ldB, float tola, float tolb, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);

                return OpenBLAS.LAPACKE.Stgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);
            }

            public static int Dtgsja(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, double* a, int ldA, double* b, int ldB, double tola, double tolb, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);

                return OpenBLAS.LAPACKE.Dtgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);
            }

            public static int Ctgsja(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);

                return OpenBLAS.LAPACKE.Ctgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);
            }

            public static int Ztgsja(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);

                return OpenBLAS.LAPACKE.Ztgsja(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, ncycle);
            }

            public static int StgsjaWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, float* a, int ldA, float* b, int ldB, float tola, float tolb, float* alpha, float* beta, float* u, int ldU, float* v, int ldV, float* q, int ldQ, float* work, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);

                return OpenBLAS.LAPACKE.StgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);
            }

            public static int DtgsjaWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, double* a, int ldA, double* b, int ldB, double tola, double tolb, double* alpha, double* beta, double* u, int ldU, double* v, int ldV, double* q, int ldQ, double* work, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);

                return OpenBLAS.LAPACKE.DtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);
            }

            public static int CtgsjaWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, float tola, float tolb, float* alpha, float* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);

                return OpenBLAS.LAPACKE.CtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);
            }

            public static int ZtgsjaWork(MatrixLayout matrixLayout, sbyte jobu, sbyte jobv, sbyte jobq, int m, int p, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, double tola, double tolb, double* alpha, double* beta, System.IntPtr u, int ldU, System.IntPtr v, int ldV, System.IntPtr q, int ldQ, System.IntPtr work, int* ncycle)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);

                return OpenBLAS.LAPACKE.ZtgsjaWork(matrixLayout, jobu, jobv, jobq, m, p, n, k, l, a, ldA, b, ldB, tola, tolb, alpha, beta, u, ldU, v, ldV, q, ldQ, work, ncycle);
            }

            public static int Stgsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, float* a, int ldA, float* b, int ldB, float* vl, int ldvl, float* vr, int ldvr, float* s, float* dif, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);

                return OpenBLAS.LAPACKE.Stgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);
            }

            public static int Dtgsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, double* a, int ldA, double* b, int ldB, double* vl, int ldvl, double* vr, int ldvr, double* s, double* dif, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);

                return OpenBLAS.LAPACKE.Dtgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);
            }

            public static int Ctgsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, float* s, float* dif, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);

                return OpenBLAS.LAPACKE.Ctgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);
            }

            public static int Ztgsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, double* s, double* dif, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);

                return OpenBLAS.LAPACKE.Ztgsna(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m);
            }

            public static int StgsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, float* a, int ldA, float* b, int ldB, float* vl, int ldvl, float* vr, int ldvr, float* s, float* dif, int mm, int* m, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);

                return OpenBLAS.LAPACKE.StgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);
            }

            public static int DtgsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, double* a, int ldA, double* b, int ldB, double* vl, int ldvl, double* vr, int ldvr, double* s, double* dif, int mm, int* m, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);
            }

            public static int CtgsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, float* s, float* dif, int mm, int* m, System.IntPtr work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);

                return OpenBLAS.LAPACKE.CtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);
            }

            public static int ZtgsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, double* s, double* dif, int mm, int* m, System.IntPtr work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);

                return OpenBLAS.LAPACKE.ZtgsnaWork(matrixLayout, job, howmny, select, n, a, ldA, b, ldB, vl, ldvl, vr, ldvr, s, dif, mm, m, work, lwork, iwork);
            }

            public static int Stgsyl(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, float* a, int ldA, float* b, int ldB, float* c, int ldC, float* d, int ldD, float* e, int ldE, float* f, int ldF, float* scale, float* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);

                return OpenBLAS.LAPACKE.Stgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);
            }

            public static int Dtgsyl(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, double* a, int ldA, double* b, int ldB, double* c, int ldC, double* d, int ldD, double* e, int ldE, double* f, int ldF, double* scale, double* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);

                return OpenBLAS.LAPACKE.Dtgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);
            }

            public static int Ctgsyl(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, System.IntPtr d, int ldD, System.IntPtr e, int ldE, System.IntPtr f, int ldF, float* scale, float* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);

                return OpenBLAS.LAPACKE.Ctgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);
            }

            public static int Ztgsyl(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, System.IntPtr d, int ldD, System.IntPtr e, int ldE, System.IntPtr f, int ldF, double* scale, double* dif)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);

                return OpenBLAS.LAPACKE.Ztgsyl(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif);
            }

            public static int StgsylWork(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, float* a, int ldA, float* b, int ldB, float* c, int ldC, float* d, int ldD, float* e, int ldE, float* f, int ldF, float* scale, float* dif, float* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);

                return OpenBLAS.LAPACKE.StgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);
            }

            public static int DtgsylWork(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, double* a, int ldA, double* b, int ldB, double* c, int ldC, double* d, int ldD, double* e, int ldE, double* f, int ldF, double* scale, double* dif, double* work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);

                return OpenBLAS.LAPACKE.DtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);
            }

            public static int CtgsylWork(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, System.IntPtr d, int ldD, System.IntPtr e, int ldE, System.IntPtr f, int ldF, float* scale, float* dif, System.IntPtr work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);

                return OpenBLAS.LAPACKE.CtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);
            }

            public static int ZtgsylWork(MatrixLayout matrixLayout, TransLapack trans, int ijob, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, System.IntPtr d, int ldD, System.IntPtr e, int ldE, System.IntPtr f, int ldF, double* scale, double* dif, System.IntPtr work, int lwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);

                return OpenBLAS.LAPACKE.ZtgsylWork(matrixLayout, trans, ijob, m, n, a, ldA, b, ldB, c, ldC, d, ldD, e, ldE, f, ldF, scale, dif, work, lwork, iwork);
            }

            public static int Stpcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, float* ap, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);

                return OpenBLAS.LAPACKE.Stpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);
            }

            public static int Dtpcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, double* ap, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);

                return OpenBLAS.LAPACKE.Dtpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);
            }

            public static int Ctpcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr ap, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);

                return OpenBLAS.LAPACKE.Ctpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);
            }

            public static int Ztpcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr ap, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);

                return OpenBLAS.LAPACKE.Ztpcon(matrixLayout, norm, uplo, diag, n, ap, rcond);
            }

            public static int StpconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, float* ap, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, iwork);

                return OpenBLAS.LAPACKE.StpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, iwork);
            }

            public static int DtpconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, double* ap, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, iwork);
            }

            public static int CtpconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr ap, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, rwork);
            }

            public static int ZtpconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr ap, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZtpconWork(matrixLayout, norm, uplo, diag, n, ap, rcond, work, rwork);
            }

            public static int Stpmqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, float* v, int ldV, float* t, int ldT, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Stpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Dtpmqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, double* v, int ldV, double* t, int ldT, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dtpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Ctpmqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ctpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Ztpmqrt(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ztpmqrt(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int StpmqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, float* v, int ldV, float* t, int ldT, float* a, int ldA, float* b, int ldB, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);

                return OpenBLAS.LAPACKE.StpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);
            }

            public static int DtpmqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, double* v, int ldV, double* t, int ldT, double* a, int ldA, double* b, int ldB, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);

                return OpenBLAS.LAPACKE.DtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);
            }

            public static int CtpmqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);

                return OpenBLAS.LAPACKE.CtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);
            }

            public static int ZtpmqrtWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, int nb, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);

                return OpenBLAS.LAPACKE.ZtpmqrtWork(matrixLayout, side, trans, m, n, k, l, nb, v, ldV, t, ldT, a, ldA, b, ldB, work);
            }

            public static int Stpqrt(MatrixLayout matrixLayout, int m, int n, int l, int nb, float* a, int ldA, float* b, int ldB, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Stpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);
            }

            public static int Dtpqrt(MatrixLayout matrixLayout, int m, int n, int l, int nb, double* a, int ldA, double* b, int ldB, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Dtpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);
            }

            public static int Ctpqrt(MatrixLayout matrixLayout, int m, int n, int l, int nb, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ctpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);
            }

            public static int Ztpqrt(MatrixLayout matrixLayout, int m, int n, int l, int nb, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ztpqrt(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT);
            }

            public static int Stpqrt2(MatrixLayout matrixLayout, int m, int n, int l, float* a, int ldA, float* b, int ldB, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Stpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Dtpqrt2(MatrixLayout matrixLayout, int m, int n, int l, double* a, int ldA, double* b, int ldB, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Dtpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Ctpqrt2(MatrixLayout matrixLayout, int m, int n, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ctpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Ztpqrt2(MatrixLayout matrixLayout, int m, int n, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ztpqrt2(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Stpqrt2Work(MatrixLayout matrixLayout, int m, int n, int l, float* a, int ldA, float* b, int ldB, float* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Stpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Dtpqrt2Work(MatrixLayout matrixLayout, int m, int n, int l, double* a, int ldA, double* b, int ldB, double* t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Dtpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Ctpqrt2Work(MatrixLayout matrixLayout, int m, int n, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ctpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int Ztpqrt2Work(MatrixLayout matrixLayout, int m, int n, int l, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);

                return OpenBLAS.LAPACKE.Ztpqrt2Work(matrixLayout, m, n, l, a, ldA, b, ldB, t, ldT);
            }

            public static int StpqrtWork(MatrixLayout matrixLayout, int m, int n, int l, int nb, float* a, int ldA, float* b, int ldB, float* t, int ldT, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);

                return OpenBLAS.LAPACKE.StpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);
            }

            public static int DtpqrtWork(MatrixLayout matrixLayout, int m, int n, int l, int nb, double* a, int ldA, double* b, int ldB, double* t, int ldT, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);

                return OpenBLAS.LAPACKE.DtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);
            }

            public static int CtpqrtWork(MatrixLayout matrixLayout, int m, int n, int l, int nb, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);

                return OpenBLAS.LAPACKE.CtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);
            }

            public static int ZtpqrtWork(MatrixLayout matrixLayout, int m, int n, int l, int nb, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr t, int ldT, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);

                return OpenBLAS.LAPACKE.ZtpqrtWork(matrixLayout, m, n, l, nb, a, ldA, b, ldB, t, ldT, work);
            }

            public static int Stprfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, float* v, int ldV, float* t, int ldT, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Stprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Dtprfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, double* v, int ldV, double* t, int ldT, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dtprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Ctprfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ctprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int Ztprfb(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ztprfb(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB);
            }

            public static int StprfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, float* v, int ldV, float* t, int ldT, float* a, int ldA, float* b, int ldB, float* work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);

                return OpenBLAS.LAPACKE.StprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);
            }

            public static int DtprfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, double* v, int ldV, double* t, int ldT, double* a, int ldA, double* b, int ldB, double* work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);

                return OpenBLAS.LAPACKE.DtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);
            }

            public static int CtprfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);

                return OpenBLAS.LAPACKE.CtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);
            }

            public static int ZtprfbWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, sbyte direct, sbyte storev, int m, int n, int k, int l, System.IntPtr v, int ldV, System.IntPtr t, int ldT, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr work, int ldwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);

                return OpenBLAS.LAPACKE.ZtprfbWork(matrixLayout, side, trans, direct, storev, m, n, k, l, v, ldV, t, ldT, a, ldA, b, ldB, work, ldwork);
            }

            public static int Stprfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* ap, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Stprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dtprfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* ap, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dtprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ctprfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ctprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ztprfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ztprfs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr);
            }

            public static int StprfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* ap, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.StprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DtprfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* ap, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CtprfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZtprfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZtprfsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Stptri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stptri(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.Stptri(matrixLayout, uplo, diag, n, ap);
            }

            public static int Dtptri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtptri(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.Dtptri(matrixLayout, uplo, diag, n, ap);
            }

            public static int Ctptri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctptri(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.Ctptri(matrixLayout, uplo, diag, n, ap);
            }

            public static int Ztptri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztptri(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.Ztptri(matrixLayout, uplo, diag, n, ap);
            }

            public static int StptriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StptriWork(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.StptriWork(matrixLayout, uplo, diag, n, ap);
            }

            public static int DtptriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtptriWork(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.DtptriWork(matrixLayout, uplo, diag, n, ap);
            }

            public static int CtptriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtptriWork(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.CtptriWork(matrixLayout, uplo, diag, n, ap);
            }

            public static int ZtptriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtptriWork(matrixLayout, uplo, diag, n, ap);

                return OpenBLAS.LAPACKE.ZtptriWork(matrixLayout, uplo, diag, n, ap);
            }

            public static int Stptrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Stptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int Dtptrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Dtptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int Ctptrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Ctptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int Ztptrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.Ztptrs(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int StptrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* ap, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.StptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int DtptrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* ap, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.DtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int CtptrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.CtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int ZtptrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr ap, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);

                return OpenBLAS.LAPACKE.ZtptrsWork(matrixLayout, uplo, trans, diag, n, nrhs, ap, b, ldB);
            }

            public static int Stpttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* ap, float* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpttf(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.Stpttf(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int Dtpttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* ap, double* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpttf(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.Dtpttf(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int Ctpttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr ap, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpttf(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.Ctpttf(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int Ztpttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr ap, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpttf(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.Ztpttf(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int StpttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* ap, float* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StpttfWork(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.StpttfWork(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int DtpttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* ap, double* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtpttfWork(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.DtpttfWork(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int CtpttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr ap, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtpttfWork(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.CtpttfWork(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int ZtpttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr ap, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtpttfWork(matrixLayout, transr, uplo, n, ap, arf);

                return OpenBLAS.LAPACKE.ZtpttfWork(matrixLayout, transr, uplo, n, ap, arf);
            }

            public static int Stpttr(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stpttr(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.Stpttr(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int Dtpttr(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtpttr(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.Dtpttr(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int Ctpttr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctpttr(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.Ctpttr(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int Ztpttr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztpttr(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.Ztpttr(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int StpttrWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* ap, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StpttrWork(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.StpttrWork(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int DtpttrWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* ap, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtpttrWork(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.DtpttrWork(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int CtpttrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtpttrWork(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.CtpttrWork(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int ZtpttrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtpttrWork(matrixLayout, uplo, n, ap, a, ldA);

                return OpenBLAS.LAPACKE.ZtpttrWork(matrixLayout, uplo, n, ap, a, ldA);
            }

            public static int Strcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, float* a, int ldA, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);

                return OpenBLAS.LAPACKE.Strcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);
            }

            public static int Dtrcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, double* a, int ldA, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);

                return OpenBLAS.LAPACKE.Dtrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);
            }

            public static int Ctrcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA, float* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);

                return OpenBLAS.LAPACKE.Ctrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);
            }

            public static int Ztrcon(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA, double* rcond)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);

                return OpenBLAS.LAPACKE.Ztrcon(matrixLayout, norm, uplo, diag, n, a, ldA, rcond);
            }

            public static int StrconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, float* a, int ldA, float* rcond, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, iwork);

                return OpenBLAS.LAPACKE.StrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, iwork);
            }

            public static int DtrconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, double* a, int ldA, double* rcond, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, iwork);

                return OpenBLAS.LAPACKE.DtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, iwork);
            }

            public static int CtrconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA, float* rcond, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, rwork);

                return OpenBLAS.LAPACKE.CtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, rwork);
            }

            public static int ZtrconWork(MatrixLayout matrixLayout, sbyte norm, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA, double* rcond, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, rwork);

                return OpenBLAS.LAPACKE.ZtrconWork(matrixLayout, norm, uplo, diag, n, a, ldA, rcond, work, rwork);
            }

            public static int Strevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, float* t, int ldT, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Strevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Dtrevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, double* t, int ldT, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Dtrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Ctrevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Ctrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int Ztrevc(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);

                return OpenBLAS.LAPACKE.Ztrevc(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m);
            }

            public static int StrevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, float* t, int ldT, float* vl, int ldvl, float* vr, int ldvr, int mm, int* m, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work);

                return OpenBLAS.LAPACKE.StrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work);
            }

            public static int DtrevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, double* t, int ldT, double* vl, int ldvl, double* vr, int ldvr, int mm, int* m, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work);

                return OpenBLAS.LAPACKE.DtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work);
            }

            public static int CtrevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work, rwork);

                return OpenBLAS.LAPACKE.CtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work, rwork);
            }

            public static int ZtrevcWork(MatrixLayout matrixLayout, sbyte side, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, int mm, int* m, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work, rwork);

                return OpenBLAS.LAPACKE.ZtrevcWork(matrixLayout, side, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, mm, m, work, rwork);
            }

            public static int Strexc(MatrixLayout matrixLayout, sbyte compq, int n, float* t, int ldT, float* q, int ldQ, int* ifst, int* ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.Strexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int Dtrexc(MatrixLayout matrixLayout, sbyte compq, int n, double* t, int ldT, double* q, int ldQ, int* ifst, int* ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.Dtrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int Ctrexc(MatrixLayout matrixLayout, sbyte compq, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.Ctrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int Ztrexc(MatrixLayout matrixLayout, sbyte compq, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.Ztrexc(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int StrexcWork(MatrixLayout matrixLayout, sbyte compq, int n, float* t, int ldT, float* q, int ldQ, int* ifst, int* ilst, float* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst, work);

                return OpenBLAS.LAPACKE.StrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst, work);
            }

            public static int DtrexcWork(MatrixLayout matrixLayout, sbyte compq, int n, double* t, int ldT, double* q, int ldQ, int* ifst, int* ilst, double* work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst, work);

                return OpenBLAS.LAPACKE.DtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst, work);
            }

            public static int CtrexcWork(MatrixLayout matrixLayout, sbyte compq, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.CtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int ZtrexcWork(MatrixLayout matrixLayout, sbyte compq, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, int ifst, int ilst)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);

                return OpenBLAS.LAPACKE.ZtrexcWork(matrixLayout, compq, n, t, ldT, q, ldQ, ifst, ilst);
            }

            public static int Strrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Strrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);
            }

            public static int Dtrrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Dtrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ctrrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ctrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);
            }

            public static int Ztrrfs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);

                return OpenBLAS.LAPACKE.Ztrrfs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr);
            }

            public static int StrrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* a, int ldA, float* b, int ldB, float* x, int ldX, float* ferr, float* berr, float* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.StrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int DtrrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* a, int ldA, double* b, int ldB, double* x, int ldX, double* ferr, double* berr, double* work, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, iwork);

                return OpenBLAS.LAPACKE.DtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, iwork);
            }

            public static int CtrrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, float* ferr, float* berr, System.IntPtr work, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.CtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int ZtrrfsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr x, int ldX, double* ferr, double* berr, System.IntPtr work, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, rwork);

                return OpenBLAS.LAPACKE.ZtrrfsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB, x, ldX, ferr, berr, work, rwork);
            }

            public static int Strsen(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, float* t, int ldT, float* q, int ldQ, float* wr, float* wi, int* m, float* s, float* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep);

                return OpenBLAS.LAPACKE.Strsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep);
            }

            public static int Dtrsen(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, double* t, int ldT, double* q, int ldQ, double* wr, double* wi, int* m, double* s, double* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep);

                return OpenBLAS.LAPACKE.Dtrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep);
            }

            public static int Ctrsen(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, System.IntPtr w, int* m, float* s, float* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep);

                return OpenBLAS.LAPACKE.Ctrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep);
            }

            public static int Ztrsen(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, System.IntPtr w, int* m, double* s, double* sep)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep);

                return OpenBLAS.LAPACKE.Ztrsen(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep);
            }

            public static int StrsenWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, float* t, int ldT, float* q, int ldQ, float* wr, float* wi, int* m, float* s, float* sep, float* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.StrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep, work, lwork, iwork, liwork);
            }

            public static int DtrsenWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, double* t, int ldT, double* q, int ldQ, double* wr, double* wi, int* m, double* s, double* sep, double* work, int lwork, int* iwork, int liwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep, work, lwork, iwork, liwork);

                return OpenBLAS.LAPACKE.DtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, wr, wi, m, s, sep, work, lwork, iwork, liwork);
            }

            public static int CtrsenWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, System.IntPtr w, int* m, float* s, float* sep, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep, work, lwork);

                return OpenBLAS.LAPACKE.CtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep, work, lwork);
            }

            public static int ZtrsenWork(MatrixLayout matrixLayout, sbyte job, sbyte compq, int* select, int n, System.IntPtr t, int ldT, System.IntPtr q, int ldQ, System.IntPtr w, int* m, double* s, double* sep, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep, work, lwork);

                return OpenBLAS.LAPACKE.ZtrsenWork(matrixLayout, job, compq, select, n, t, ldT, q, ldQ, w, m, s, sep, work, lwork);
            }

            public static int Strsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, float* t, int ldT, float* vl, int ldvl, float* vr, int ldvr, float* s, float* sep, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);

                return OpenBLAS.LAPACKE.Strsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);
            }

            public static int Dtrsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, double* t, int ldT, double* vl, int ldvl, double* vr, int ldvr, double* s, double* sep, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);

                return OpenBLAS.LAPACKE.Dtrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);
            }

            public static int Ctrsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, float* s, float* sep, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);

                return OpenBLAS.LAPACKE.Ctrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);
            }

            public static int Ztrsna(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, double* s, double* sep, int mm, int* m)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);

                return OpenBLAS.LAPACKE.Ztrsna(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m);
            }

            public static int StrsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, float* t, int ldT, float* vl, int ldvl, float* vr, int ldvr, float* s, float* sep, int mm, int* m, float* work, int ldwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork);

                return OpenBLAS.LAPACKE.StrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork);
            }

            public static int DtrsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, double* t, int ldT, double* vl, int ldvl, double* vr, int ldvr, double* s, double* sep, int mm, int* m, double* work, int ldwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork);

                return OpenBLAS.LAPACKE.DtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, iwork);
            }

            public static int CtrsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, float* s, float* sep, int mm, int* m, System.IntPtr work, int ldwork, float* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork);

                return OpenBLAS.LAPACKE.CtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork);
            }

            public static int ZtrsnaWork(MatrixLayout matrixLayout, sbyte job, sbyte howmny, int* select, int n, System.IntPtr t, int ldT, System.IntPtr vl, int ldvl, System.IntPtr vr, int ldvr, double* s, double* sep, int mm, int* m, System.IntPtr work, int ldwork, double* rwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork);

                return OpenBLAS.LAPACKE.ZtrsnaWork(matrixLayout, job, howmny, select, n, t, ldT, vl, ldvl, vr, ldvr, s, sep, mm, m, work, ldwork, rwork);
            }

            public static int Strsyl(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, float* a, int ldA, float* b, int ldB, float* c, int ldC, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.Strsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int Dtrsyl(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, double* a, int ldA, double* b, int ldB, double* c, int ldC, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.Dtrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int Ctrsyl(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.Ctrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int Ztrsyl(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.Ztrsyl(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int StrsylWork(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, float* a, int ldA, float* b, int ldB, float* c, int ldC, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.StrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int DtrsylWork(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, double* a, int ldA, double* b, int ldB, double* c, int ldC, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.DtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int CtrsylWork(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, float* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.CtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int ZtrsylWork(MatrixLayout matrixLayout, sbyte trana, sbyte tranb, int isgn, int m, int n, System.IntPtr a, int ldA, System.IntPtr b, int ldB, System.IntPtr c, int ldC, double* scale)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);

                return OpenBLAS.LAPACKE.ZtrsylWork(matrixLayout, trana, tranb, isgn, m, n, a, ldA, b, ldB, c, ldC, scale);
            }

            public static int Strtri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strtri(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.Strtri(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int Dtrtri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrtri(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.Dtrtri(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int Ctrtri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrtri(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.Ctrtri(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int Ztrtri(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrtri(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.Ztrtri(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int StrtriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, float* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrtriWork(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.StrtriWork(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int DtrtriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, double* a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrtriWork(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.DtrtriWork(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int CtrtriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrtriWork(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.CtrtriWork(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int ZtrtriWork(MatrixLayout matrixLayout, UpLo uplo, sbyte diag, int n, System.IntPtr a, int ldA)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrtriWork(matrixLayout, uplo, diag, n, a, ldA);

                return OpenBLAS.LAPACKE.ZtrtriWork(matrixLayout, uplo, diag, n, a, ldA);
            }

            public static int Strtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Strtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int Dtrtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Dtrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int Ctrtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ctrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int Ztrtrs(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.Ztrtrs(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int StrtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, float* a, int ldA, float* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.StrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int DtrtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, double* a, int ldA, double* b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.DtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int CtrtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.CtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int ZtrtrsWork(MatrixLayout matrixLayout, UpLo uplo, TransLapack trans, sbyte diag, int n, int nrhs, System.IntPtr a, int ldA, System.IntPtr b, int ldB)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);

                return OpenBLAS.LAPACKE.ZtrtrsWork(matrixLayout, uplo, trans, diag, n, nrhs, a, ldA, b, ldB);
            }

            public static int Strttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a, int ldA, float* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strttf(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.Strttf(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int Dtrttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a, int ldA, double* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrttf(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.Dtrttf(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int Ctrttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrttf(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.Ctrttf(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int Ztrttf(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrttf(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.Ztrttf(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int StrttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, float* a, int ldA, float* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.StrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int DtrttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, double* a, int ldA, double* arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.DtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int CtrttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.CtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int ZtrttfWork(MatrixLayout matrixLayout, sbyte transr, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr arf)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);

                return OpenBLAS.LAPACKE.ZtrttfWork(matrixLayout, transr, uplo, n, a, ldA, arf);
            }

            public static int Strttp(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Strttp(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.Strttp(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int Dtrttp(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtrttp(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.Dtrttp(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int Ctrttp(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctrttp(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.Ctrttp(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int Ztrttp(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztrttp(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.Ztrttp(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int StrttpWork(MatrixLayout matrixLayout, UpLo uplo, int n, float* a, int ldA, float* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StrttpWork(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.StrttpWork(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int DtrttpWork(MatrixLayout matrixLayout, UpLo uplo, int n, double* a, int ldA, double* ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtrttpWork(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.DtrttpWork(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int CtrttpWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtrttpWork(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.CtrttpWork(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int ZtrttpWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr ap)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtrttpWork(matrixLayout, uplo, n, a, ldA, ap);

                return OpenBLAS.LAPACKE.ZtrttpWork(matrixLayout, uplo, n, a, ldA, ap);
            }

            public static int Stzrzf(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Stzrzf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Stzrzf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Dtzrzf(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Dtzrzf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Dtzrzf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Ctzrzf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ctzrzf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Ctzrzf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int Ztzrzf(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Ztzrzf(matrixLayout, m, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Ztzrzf(matrixLayout, m, n, a, ldA, tau);
            }

            public static int StzrzfWork(MatrixLayout matrixLayout, int m, int n, float* a, int ldA, float* tau, float* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.StzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.StzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int DtzrzfWork(MatrixLayout matrixLayout, int m, int n, double* a, int ldA, double* tau, double* work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.DtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.DtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int CtzrzfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int ZtzrzfWork(MatrixLayout matrixLayout, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZtzrzfWork(matrixLayout, m, n, a, ldA, tau, work, lwork);
            }

            public static int Cunbdb(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, float* theta, float* phi, System.IntPtr taup1, System.IntPtr taup2, System.IntPtr tauq1, System.IntPtr tauq2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);

                return OpenBLAS.LAPACKE.Cunbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);
            }

            public static int Zunbdb(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, double* theta, double* phi, System.IntPtr taup1, System.IntPtr taup2, System.IntPtr tauq1, System.IntPtr tauq2)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);

                return OpenBLAS.LAPACKE.Zunbdb(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2);
            }

            public static int CunbdbWork(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, float* theta, float* phi, System.IntPtr taup1, System.IntPtr taup2, System.IntPtr tauq1, System.IntPtr tauq2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);

                return OpenBLAS.LAPACKE.CunbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);
            }

            public static int ZunbdbWork(MatrixLayout matrixLayout, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, double* theta, double* phi, System.IntPtr taup1, System.IntPtr taup2, System.IntPtr tauq1, System.IntPtr tauq2, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);

                return OpenBLAS.LAPACKE.ZunbdbWork(matrixLayout, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, phi, taup1, taup2, tauq1, tauq2, work, lwork);
            }

            public static int Cuncsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, float* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cuncsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);

                return OpenBLAS.LAPACKE.Cuncsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);
            }

            public static int Zuncsd(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, double* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zuncsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);

                return OpenBLAS.LAPACKE.Zuncsd(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t);
            }

            public static int Cuncsd2by1(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x21, int ldx21, float* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cuncsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);

                return OpenBLAS.LAPACKE.Cuncsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);
            }

            public static int Zuncsd2by1(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x21, int ldx21, double* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zuncsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);

                return OpenBLAS.LAPACKE.Zuncsd2by1(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t);
            }

            public static int Cuncsd2by1Work(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x21, int ldx21, float* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cuncsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.Cuncsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork);
            }

            public static int Zuncsd2by1Work(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x21, int ldx21, double* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zuncsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.Zuncsd2by1Work(matrixLayout, jobu1, jobu2, jobv1t, m, p, q, x11, ldx11, x21, ldx21, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, work, lwork, rwork, lrwork, iwork);
            }

            public static int CuncsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, float* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, System.IntPtr work, int lwork, float* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CuncsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.CuncsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork);
            }

            public static int ZuncsdWork(MatrixLayout matrixLayout, sbyte jobu1, sbyte jobu2, sbyte jobv1t, sbyte jobv2t, TransLapack trans, sbyte signs, int m, int p, int q, System.IntPtr x11, int ldx11, System.IntPtr x12, int ldx12, System.IntPtr x21, int ldx21, System.IntPtr x22, int ldx22, double* theta, System.IntPtr u1, int ldu1, System.IntPtr u2, int ldu2, System.IntPtr v1t, int ldv1t, System.IntPtr v2t, int ldv2t, System.IntPtr work, int lwork, double* rwork, int lrwork, int* iwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZuncsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork);

                return OpenBLAS.LAPACKE.ZuncsdWork(matrixLayout, jobu1, jobu2, jobv1t, jobv2t, trans, signs, m, p, q, x11, ldx11, x12, ldx12, x21, ldx21, x22, ldx22, theta, u1, ldu1, u2, ldu2, v1t, ldv1t, v2t, ldv2t, work, lwork, rwork, lrwork, iwork);
            }

            public static int Cungbr(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cungbr(matrixLayout, vect, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cungbr(matrixLayout, vect, m, n, k, a, ldA, tau);
            }

            public static int Zungbr(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zungbr(matrixLayout, vect, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zungbr(matrixLayout, vect, m, n, k, a, ldA, tau);
            }

            public static int CungbrWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CungbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CungbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int ZungbrWork(MatrixLayout matrixLayout, sbyte vect, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZungbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZungbrWork(matrixLayout, vect, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Cunghr(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunghr(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cunghr(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int Zunghr(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunghr(matrixLayout, n, ilo, ihi, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zunghr(matrixLayout, n, ilo, ihi, a, ldA, tau);
            }

            public static int CunghrWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CunghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int ZunghrWork(MatrixLayout matrixLayout, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZunghrWork(matrixLayout, n, ilo, ihi, a, ldA, tau, work, lwork);
            }

            public static int Cunglq(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunglq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cunglq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Zunglq(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunglq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zunglq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int CunglqWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CunglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int ZunglqWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZunglqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Cungql(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cungql(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cungql(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Zungql(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zungql(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zungql(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int CungqlWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CungqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CungqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int ZungqlWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZungqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZungqlWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Cungqr(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cungqr(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cungqr(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Zungqr(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zungqr(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zungqr(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int CungqrWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CungqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CungqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int ZungqrWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZungqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZungqrWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Cungrq(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cungrq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cungrq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int Zungrq(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zungrq(matrixLayout, m, n, k, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zungrq(matrixLayout, m, n, k, a, ldA, tau);
            }

            public static int CungrqWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CungrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CungrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int ZungrqWork(MatrixLayout matrixLayout, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZungrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZungrqWork(matrixLayout, m, n, k, a, ldA, tau, work, lwork);
            }

            public static int Cungtr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cungtr(matrixLayout, uplo, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Cungtr(matrixLayout, uplo, n, a, ldA, tau);
            }

            public static int Zungtr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tau)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zungtr(matrixLayout, uplo, n, a, ldA, tau);

                return OpenBLAS.LAPACKE.Zungtr(matrixLayout, uplo, n, a, ldA, tau);
            }

            public static int CungtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CungtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.CungtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);
            }

            public static int ZungtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZungtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);

                return OpenBLAS.LAPACKE.ZungtrWork(matrixLayout, uplo, n, a, ldA, tau, work, lwork);
            }

            public static int Cunmbr(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Zunmbr(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmbr(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int CunmbrWork(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmbrWork(MatrixLayout matrixLayout, sbyte vect, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmbrWork(matrixLayout, vect, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmhr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);
            }

            public static int Zunmhr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmhr(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC);
            }

            public static int CunmhrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmhrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int ilo, int ihi, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmhrWork(matrixLayout, side, trans, m, n, ilo, ihi, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Zunmlq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmlq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int CunmlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmlqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmlqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmql(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Zunmql(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmql(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int CunmqlWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmqlWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmqlWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Zunmqr(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmqr(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int CunmqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmqrWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmqrWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmrq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int Zunmrq(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmrq(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC);
            }

            public static int CunmrqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmrqWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmrqWork(matrixLayout, side, trans, m, n, k, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmrz(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);
            }

            public static int Zunmrz(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmrz(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC);
            }

            public static int CunmrzWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmrzWork(MatrixLayout matrixLayout, sbyte side, TransLapack trans, int m, int n, int k, int l, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmrzWork(matrixLayout, side, trans, m, n, k, l, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cunmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cunmtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cunmtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);
            }

            public static int Zunmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zunmtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zunmtr(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC);
            }

            public static int CunmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CunmtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.CunmtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int ZunmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr a, int ldA, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work, int lwork)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZunmtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);

                return OpenBLAS.LAPACKE.ZunmtrWork(matrixLayout, side, uplo, trans, m, n, a, ldA, tau, c, ldC, work, lwork);
            }

            public static int Cupgtr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cupgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);

                return OpenBLAS.LAPACKE.Cupgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);
            }

            public static int Zupgtr(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr q, int ldQ)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zupgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);

                return OpenBLAS.LAPACKE.Zupgtr(matrixLayout, uplo, n, ap, tau, q, ldQ);
            }

            public static int CupgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr q, int ldQ, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CupgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);

                return OpenBLAS.LAPACKE.CupgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);
            }

            public static int ZupgtrWork(MatrixLayout matrixLayout, UpLo uplo, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr q, int ldQ, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZupgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);

                return OpenBLAS.LAPACKE.ZupgtrWork(matrixLayout, uplo, n, ap, tau, q, ldQ, work);
            }

            public static int Cupmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Cupmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);

                return OpenBLAS.LAPACKE.Cupmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);
            }

            public static int Zupmtr(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr c, int ldC)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.Zupmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);

                return OpenBLAS.LAPACKE.Zupmtr(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC);
            }

            public static int CupmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.CupmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.CupmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);
            }

            public static int ZupmtrWork(MatrixLayout matrixLayout, sbyte side, UpLo uplo, TransLapack trans, int m, int n, System.IntPtr ap, System.IntPtr tau, System.IntPtr c, int ldC, System.IntPtr work)
            {
                if (MKL.IsSupoprted)
                    return MKL.LAPACKE.ZupmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);

                return OpenBLAS.LAPACKE.ZupmtrWork(matrixLayout, side, uplo, trans, m, n, ap, tau, c, ldC, work);
            }

        }
    }
}